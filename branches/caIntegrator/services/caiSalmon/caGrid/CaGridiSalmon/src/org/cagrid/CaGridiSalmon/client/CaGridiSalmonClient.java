package org.cagrid.CaGridiSalmon.client;

import java.io.InputStream;
import java.rmi.RemoteException;

import javax.xml.namespace.QName;

import org.apache.axis.EngineConfiguration;
import org.apache.axis.client.AxisClient;
import org.apache.axis.client.Stub;
import org.apache.axis.configuration.FileProvider;
import org.apache.axis.message.addressing.EndpointReferenceType;
import org.apache.axis.types.URI.MalformedURIException;

import org.oasis.wsrf.properties.GetResourcePropertyResponse;

import org.globus.gsi.GlobusCredential;

import org.cagrid.CaGridiSalmon.stubs.CaGridiSalmonPortType;
import org.cagrid.CaGridiSalmon.stubs.service.CaGridiSalmonServiceAddressingLocator;
import org.cagrid.CaGridiSalmon.common.CaGridiSalmonI;
import gov.nih.nci.cagrid.introduce.security.client.ServiceSecurityClient;

/**
 * This class is autogenerated, DO NOT EDIT GENERATED GRID SERVICE ACCESS METHODS.
 *
 * This client is generated automatically by Introduce to provide a clean unwrapped API to the
 * service.
 *
 * On construction the class instance will contact the remote service and retrieve it's security
 * metadata description which it will use to configure the Stub specifically for each method call.
 * 
 * @created by Introduce Toolkit version 1.3
 */
public class CaGridiSalmonClient extends CaGridiSalmonClientBase implements CaGridiSalmonI {	

	public CaGridiSalmonClient(String url) throws MalformedURIException, RemoteException {
		this(url,null);	
	}

	public CaGridiSalmonClient(String url, GlobusCredential proxy) throws MalformedURIException, RemoteException {
	   	super(url,proxy);
	}
	
	public CaGridiSalmonClient(EndpointReferenceType epr) throws MalformedURIException, RemoteException {
	   	this(epr,null);
	}
	
	public CaGridiSalmonClient(EndpointReferenceType epr, GlobusCredential proxy) throws MalformedURIException, RemoteException {
	   	super(epr,proxy);
	}

	public static void usage(){
		System.out.println(CaGridiSalmonClient.class.getName() + " -url <service url>");
	}
	
	public static void main(String [] args){
	    System.out.println("Running the Grid Service Client");
		try{
		if(!(args.length < 2)){
			if(args[0].equals("-url")){
			  CaGridiSalmonClient client = new CaGridiSalmonClient(args[1]);

			  // place client calls here if you want to use this main as a
			  // test....
			  //create strings to hold example URLs
			  String[] files = {"http://isalmon.fhcrc.org/labkey/files/home/SharedData/US14702406_251643612132_S01_miRNA-v1_95_May07_1_1.txt?fileSet=GBM%20miRNA%20Level%201",
					    "http://isalmon.fhcrc.org/labkey/files/home/SharedData/US14702406_251643612132_S01_miRNA-v1_95_May07_1_2.txt?fileSet=GBM%20miRNA%20Level%201",
					    "http://isalmon.fhcrc.org/labkey/files/home/SharedData/US14702406_251643612132_S01_miRNA-v1_95_May07_1_4.txt?fileSet=GBM%20miRNA%20Level%201",
					    "http://isalmon.fhcrc.org/labkey/files/home/SharedData/US14702406_251643612132_S01_miRNA-v1_95_May07_2_1.txt?fileSet=GBM%20miRNA%20Level%201"};
			  String[] conds = {"A","A","B","B"};
			  // create targets, e.g., from man page
			  org.bioconductor.cagrid.caisalmon.Targets targets = 
			      new org.bioconductor.cagrid.caisalmon.Targets(conds, files);
			  // invoke service
			  org.bioconductor.cagrid.caisalmon.MicroRNATopTable topTable = 
			      client.camiRNATwoGroupDifferentialExpression(targets);
			  // TODO validate return value
			  if(null != topTable){ // Check if the object has the expected number of rows
			      String[] geneName = topTable.getGeneName();
			      double[] adjPVal = topTable.getAdjustedPValue();
			      double[] fc = topTable.getLogFoldChange();
			      double[] logOdds = topTable.getLogOdds();
			      String[] pName = topTable.getProbeName();
			      double[] pVal = topTable.getPValue();
			      if(geneName.length != 1510){
				  //then throw an exception
				  throw new Exception("Wrong number of Gene Names.");
			      }
			      System.out.println("Hooray?");
			      for (int i = 0 ; i < 7; ++i){
				  System.out.println(i + " " +  pName[i] + " " +  geneName[i] 
						     + " " +  fc[i] + " " +  pVal[i] + " " 
						     +  adjPVal[i] + " " +  logOdds[i]);
			      }
			  }

			} else {
				usage();
				System.exit(1);
			}
		} else {
			usage();
			System.exit(1);
		}
		} catch (Exception e) {
			e.printStackTrace();
			System.exit(1);
		}
	}

  public org.bioconductor.cagrid.caisalmon.MicroRNATopTable camiRNATwoGroupDifferentialExpression(org.bioconductor.cagrid.caisalmon.Targets targets) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"camiRNATwoGroupDifferentialExpression");
    org.cagrid.CaGridiSalmon.stubs.CamiRNATwoGroupDifferentialExpressionRequest params = new org.cagrid.CaGridiSalmon.stubs.CamiRNATwoGroupDifferentialExpressionRequest();
    org.cagrid.CaGridiSalmon.stubs.CamiRNATwoGroupDifferentialExpressionRequestTargets targetsContainer = new org.cagrid.CaGridiSalmon.stubs.CamiRNATwoGroupDifferentialExpressionRequestTargets();
    targetsContainer.setTargets(targets);
    params.setTargets(targetsContainer);
    org.cagrid.CaGridiSalmon.stubs.CamiRNATwoGroupDifferentialExpressionResponse boxedResult = portType.camiRNATwoGroupDifferentialExpression(params);
    return boxedResult.getMicroRNATopTable();
    }
  }

  public org.oasis.wsrf.properties.GetMultipleResourcePropertiesResponse getMultipleResourceProperties(org.oasis.wsrf.properties.GetMultipleResourceProperties_Element params) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"getMultipleResourceProperties");
    return portType.getMultipleResourceProperties(params);
    }
  }

  public org.oasis.wsrf.properties.GetResourcePropertyResponse getResourceProperty(javax.xml.namespace.QName params) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"getResourceProperty");
    return portType.getResourceProperty(params);
    }
  }

  public org.oasis.wsrf.properties.QueryResourcePropertiesResponse queryResourceProperties(org.oasis.wsrf.properties.QueryResourceProperties_Element params) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"queryResourceProperties");
    return portType.queryResourceProperties(params);
    }
  }

}
