package org.bioconductor.packages.caPROcess.client;

import java.io.InputStream;
import java.rmi.RemoteException;

import javax.xml.namespace.QName;

import org.apache.axis.EngineConfiguration;
import org.apache.axis.client.AxisClient;
import org.apache.axis.client.Stub;
import org.apache.axis.configuration.FileProvider;
import org.apache.axis.message.addressing.EndpointReferenceType;
import org.apache.axis.types.URI.MalformedURIException;

import org.oasis.wsrf.properties.GetResourcePropertyResponse;

import org.globus.gsi.GlobusCredential;

import org.bioconductor.packages.caPROcess.stubs.CaPROcessPortType;
import org.bioconductor.packages.caPROcess.stubs.service.CaPROcessServiceAddressingLocator;
import org.bioconductor.packages.caPROcess.common.CaPROcessI;
import gov.nih.nci.cagrid.introduce.security.client.ServiceSecurityClient;

/**
 * This class is autogenerated, DO NOT EDIT GENERATED GRID SERVICE ACCESS METHODS.
 *
 * This client is generated automatically by Introduce to provide a clean unwrapped API to the
 * service.
 *
 * On construction the class instance will contact the remote service and retrieve it's security
 * metadata description which it will use to configure the Stub specifically for each method call.
 * 
 * @created by Introduce Toolkit version 1.2
 */
public class CaPROcessClient extends CaPROcessClientBase implements CaPROcessI {	
	private static final String SERVICE_URL = "http://cabig.bioconductor.org:8080/wsrf/services/cagrid/CaPROcess";
	
	public CaPROcessClient() throws MalformedURIException, RemoteException {
		this(SERVICE_URL);	
	}
	
	public CaPROcessClient(String url) throws MalformedURIException, RemoteException {
		this(url,null);	
	}

	public CaPROcessClient(String url, GlobusCredential proxy) throws MalformedURIException, RemoteException {
	   	super(url,proxy);
	}
	
	public CaPROcessClient(EndpointReferenceType epr) throws MalformedURIException, RemoteException {
	   	this(epr,null);
	}
	
	public CaPROcessClient(EndpointReferenceType epr, GlobusCredential proxy) throws MalformedURIException, RemoteException {
	   	super(epr,proxy);
	}

	public static void usage(){
		System.out.println(CaPROcessClient.class.getName() + " -url <service url>");
	}
	
	private void head(org.bioconductor.cagrid.caprocess.PeakLocation peaks, int from) {
		int to = from + 5;
		System.out.println(peaks.getSpectrumName()[from]);
		System.out.println("Id\tM/Z\tIntensity");
		for (int i = from; i < to; ++i) {
		   System.out.format("%d\t%.2f\t%.2f\n",
				      peaks.getPeakNumberInSpectrum()[i],
				      peaks.getSubstanceMassAtIntensity()[i],
				      peaks.getRelativeIntensity()[i]);
		}
		System.out.println("...\n");
	}
	
	public org.bioconductor.cagrid.caprocess.PeakLocation invokeService(String p_filename) throws java.io.FileNotFoundException, Exception 
	{
		if(p_filename == null || p_filename.equals("")) {
			System.out.println("Filename is not defined");
			return null;
		}
		
		System.out.println("invokeService get called");
		
		try {
			
			 // Populate data and parameter objects
			  java.io.FileInputStream fin = null;
			  java.io.ObjectInputStream oin = null;
			  org.bioconductor.packages.caPROcess.MzAssays rwsAssays = null;
			  org.bioconductor.cagrid.caprocess.MzAssays caAssays = null;
			  try {
			      fin = new java.io.FileInputStream(new java.io.File(p_filename));
			      oin = new java.io.ObjectInputStream(fin);
			      rwsAssays = (org.bioconductor.packages.caPROcess.MzAssays) oin.readObject();

			  } catch (Exception e) {
			      System.err.println("ERROR: could not read sample data");
			      throw e;
			  } finally {
				fin.close();
				oin.close();
			  }
			  
			  org.bioconductor.cagrid.caprocess.PROcessParameter caParameters = new org.bioconductor.cagrid.caprocess.PROcessParameter();
			  caParameters.setRenormalizationCutoff(1500.);
			  
			  caAssays = convertToMzAssays(rwsAssays);
			  
			  org.bioconductor.cagrid.caprocess.PeakLocation caPeakLocation = getPeakLocation(caAssays, caParameters);
			  
			  return caPeakLocation;
		    
			  
		}
		catch(RemoteException ew) {
			ew.printStackTrace();
		}
		
		return null;

	}
	
	private org.bioconductor.cagrid.caprocess.MzAssays convertToMzAssays(final org.bioconductor.packages.caPROcess.MzAssays p_rwsAssays) 
	{
		
		Object[] rwsObject = p_rwsAssays.getRData();
	      org.bioconductor.cagrid.caprocess.MzSpectrum[] caSpectrum = 
		  new org.bioconductor.cagrid.caprocess.MzSpectrum[rwsObject.length];
	      for (int i=0; i < rwsObject.length; ++i) {
	    	  org.bioconductor.packages.caPROcess.MzSpectrum rwsSpectrum = (org.bioconductor.packages.caPROcess.MzSpectrum) rwsObject[i];
	    	  caSpectrum[i] = new org.bioconductor.cagrid.caprocess.MzSpectrum(rwsSpectrum.getIntensity(),
								   												rwsSpectrum.getMzRatio(),
								   												rwsSpectrum.getSpectrumName()[0]);
	      }
	      
	      if (caSpectrum.length>0) {
			  System.out.print("\nInput: " + caSpectrum.length + " spectra x " +
					   						 caSpectrum[0].getIntensity().length +
					   						 " intensities\n\n");
		  }
	      
	      return new org.bioconductor.cagrid.caprocess.MzAssays(caSpectrum);
	}
	
	public static void main(String [] args){
	    System.out.println("Running the Grid Service Client");
		try{
		if(!(args.length < 2)){
			if(args[0].equals("-url")){
			  CaPROcessClient client = new CaPROcessClient(args[1]);
			  
			  // Populate data and parameter objects
			  java.io.FileInputStream fin = null;
			  java.io.ObjectInputStream oin = null;
			  org.bioconductor.packages.caPROcess.MzAssays rwsAssays = null;
			  org.bioconductor.cagrid.caprocess.MzAssays caAssays = null;
			  try {
			      String jDataFile = client.getClass().getResource("Data/mzAssays.data").getFile();
			      fin = new java.io.FileInputStream(jDataFile);
			      oin = new java.io.ObjectInputStream(fin);
			      rwsAssays = (org.bioconductor.packages.caPROcess.MzAssays) oin.readObject();

			  } catch (Exception e) {
			      System.err.println("ERROR: could not read sample data");
			      throw e;
			  } finally {
				fin.close();
				oin.close();
			  }
			  
/*			  
			      Object[] rwsObject = rwsAssays.getRData();
			      org.bioconductor.cagrid.caprocess.MzSpectrum[] caSpectrum = 
				  new org.bioconductor.cagrid.caprocess.MzSpectrum[rwsObject.length];
			      for (int i=0; i < rwsObject.length; ++i) {
				  org.bioconductor.packages.caPROcess.MzSpectrum rwsSpectrum =
				      (org.bioconductor.packages.caPROcess.MzSpectrum) rwsObject[i];
				  caSpectrum[i] = new
				      org.bioconductor.cagrid.caprocess.MzSpectrum(rwsSpectrum.getIntensity(),
										   rwsSpectrum.getMzRatio(),
										   rwsSpectrum.getSpectrumName()[0]);
			      }
			      caAssays = new org.bioconductor.cagrid.caprocess.MzAssays(caSpectrum);
			  					  	  
			  		  
			      if (caSpectrum.length>0) {
				  System.out.print("\nInput: " +
						   caSpectrum.length + " spectra x " +
						   caSpectrum[0].getIntensity().length +
						   " intensities\n\n");
			      }
*/
			  
			  caAssays = client.convertToMzAssays(rwsAssays);
			  
			  System.out.println("Done converting serialized data to MzAssays...");
			      
			  org.bioconductor.cagrid.caprocess.PROcessParameter caParameters =
			      new org.bioconductor.cagrid.caprocess.PROcessParameter();
			  caParameters.setRenormalizationCutoff(1500.);

			  // invoke service
			  System.out.println("Invoking caPROcess");
			  org.bioconductor.cagrid.caprocess.PeakLocation caPeakLocation = null;
			  try {
			      caPeakLocation = client.getPeakLocation(caAssays, caParameters);
			  } catch (Exception e) {
			      System.err.println("ERROR: could not invoke service");
			      throw e;
			  }

			  // summarize results
			  System.out.println("\n" +
					     "Total number of peaks: " +
					     caPeakLocation.getSpectrumId().length +
					     "\n");
			  client.head(caPeakLocation, 0);
			  client.head(caPeakLocation, 12);
			} else {
				usage();
				System.exit(1);
			}
		} else {
			usage();
			System.exit(1);
		}
		} catch (Exception e) {
			e.printStackTrace();
			System.exit(1);
		}
	}


  public org.oasis.wsrf.properties.GetMultipleResourcePropertiesResponse getMultipleResourceProperties(org.oasis.wsrf.properties.GetMultipleResourceProperties_Element params) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"getMultipleResourceProperties");
    return portType.getMultipleResourceProperties(params);
    }
  }

  public org.oasis.wsrf.properties.GetResourcePropertyResponse getResourceProperty(javax.xml.namespace.QName params) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"getResourceProperty");
    return portType.getResourceProperty(params);
    }
  }

  public org.oasis.wsrf.properties.QueryResourcePropertiesResponse queryResourceProperties(org.oasis.wsrf.properties.QueryResourceProperties_Element params) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"queryResourceProperties");
    return portType.queryResourceProperties(params);
    }
  }

  public org.bioconductor.cagrid.caprocess.PeakLocation getPeakLocation(org.bioconductor.cagrid.caprocess.MzAssays mzAssays,org.bioconductor.cagrid.caprocess.PROcessParameter pROcessParameter) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"getPeakLocation");
    org.bioconductor.packages.caPROcess.stubs.GetPeakLocationRequest params = new org.bioconductor.packages.caPROcess.stubs.GetPeakLocationRequest();
    org.bioconductor.packages.caPROcess.stubs.GetPeakLocationRequestMzAssays mzAssaysContainer = new org.bioconductor.packages.caPROcess.stubs.GetPeakLocationRequestMzAssays();
    mzAssaysContainer.setMzAssays(mzAssays);
    params.setMzAssays(mzAssaysContainer);
    org.bioconductor.packages.caPROcess.stubs.GetPeakLocationRequestPROcessParameter pROcessParameterContainer = new org.bioconductor.packages.caPROcess.stubs.GetPeakLocationRequestPROcessParameter();
    pROcessParameterContainer.setPROcessParameter(pROcessParameter);
    params.setPROcessParameter(pROcessParameterContainer);
    org.bioconductor.packages.caPROcess.stubs.GetPeakLocationResponse boxedResult = portType.getPeakLocation(params);
    return boxedResult.getPeakLocation();
    }
  }

}
