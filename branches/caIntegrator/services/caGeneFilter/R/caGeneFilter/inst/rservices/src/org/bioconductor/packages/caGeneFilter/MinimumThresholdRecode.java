package org.bioconductor.packages.caGeneFilter;

	/**
	* This file was auto-generated by R function 
	* createJavaBean Mon Mar 30 14:04:02 2009. 
	* It represents the S4 Class MinimumThresholdRecode in R package caGeneFilter. 
	*/


public class MinimumThresholdRecode extends Recode implements java.io.Serializable  {
	private double[] minimumThreshold;
	private double[] recodeValue;

	public MinimumThresholdRecode() {
		this.minimumThreshold = new double[]{};
		this.recodeValue = new double[]{};
	}

	public MinimumThresholdRecode(
		double[] minimumThreshold,
		double[] recodeValue){

		this.minimumThreshold = minimumThreshold;
		this.recodeValue = recodeValue;
	}

	/**
	* Sets the minimumThreshold value for this MinimumThresholdRecode
	*
	* @param	minimumThreshold	
	*/
	public void setMinimumThreshold(double[] minimumThreshold) {
		this.minimumThreshold = minimumThreshold;
	}

	/**
	* Gets the minimumThreshold value for this MinimumThresholdRecode
	*
	* @return	the value of minimumThreshold
	*	
	*/
	public double[] getMinimumThreshold() {
		return minimumThreshold;
	}

	/**
	* Sets the recodeValue value for this MinimumThresholdRecode
	*
	* @param	recodeValue	
	*/
	public void setRecodeValue(double[] recodeValue) {
		this.recodeValue = recodeValue;
	}

	/**
	* Gets the recodeValue value for this MinimumThresholdRecode
	*
	* @return	the value of recodeValue
	*	
	*/
	public double[] getRecodeValue() {
		return recodeValue;
	}

	/**
	* Print this MinimumThresholdRecode to String
	*
	* @return	contents of MinimumThresholdRecode as a String
	*/
	public String toString() {
		StringBuffer res=new StringBuffer("{");
		res.append("minimumThreshold=" + java.util.Arrays.toString( minimumThreshold ));
		res.append(", ");
		res.append("recodeValue=" + java.util.Arrays.toString( recodeValue ));
		res.append("}");
		return res.toString();
	}

	/**
	* Compare this MinimumThresholdRecode with the input data.
	*
	* @param inputObject	the data to be compared with.
	* @return	true if the two have the same contents, false otherwise.
	*/
	public boolean equals(Object inputObject) {
		boolean res = getClass().equals(inputObject.getClass());
		if(res){
			MinimumThresholdRecode obj = (MinimumThresholdRecode)inputObject;
			Object inputMinimumThreshold = obj.getMinimumThreshold();
			if((minimumThreshold==null)||(inputMinimumThreshold==null))
				res = res&&(minimumThreshold==inputMinimumThreshold);
			else
				res = res&&java.util.Arrays.equals(minimumThreshold, (double[])inputMinimumThreshold);
			Object inputRecodeValue = obj.getRecodeValue();
			if((recodeValue==null)||(inputRecodeValue==null))
				res = res&&(recodeValue==inputRecodeValue);
			else
				res = res&&java.util.Arrays.equals(recodeValue, (double[])inputRecodeValue);
		}
		return res;
	}

}
