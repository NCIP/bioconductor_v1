package org.bioconductor.packages.caDNAcopy;

	/**
	* This file was auto-generated by R function 
	* createJavaBean Thu Feb 22 09:34:39 2007. 
	* It represents the S4 Class DerivedDNAcopySegment in R package caDNAcopy. 
	*	Class encapsulating DNA segments
	*	identified based on copy number, using algorithms
	*	in the DNAcopy-package package.
	*/


public class DerivedDNAcopySegment implements java.io.Serializable  {
	private String[] sampleId;
	private String[] chromosomeIndex;
	private int[] startMapPosition;
	private int[] endMapPosition;
	private int[] markersPerSegment;
	private double[] averageSegmentValue;

	public DerivedDNAcopySegment() {
		this.sampleId = new String[]{};
		this.chromosomeIndex = new String[]{};
		this.startMapPosition = new int[]{};
		this.endMapPosition = new int[]{};
		this.markersPerSegment = new int[]{};
		this.averageSegmentValue = new double[]{};
	}

	public DerivedDNAcopySegment(
		String[] sampleId,
		String[] chromosomeIndex,
		int[] startMapPosition,
		int[] endMapPosition,
		int[] markersPerSegment,
		double[] averageSegmentValue){

		this.sampleId = sampleId;
		this.chromosomeIndex = chromosomeIndex;
		this.startMapPosition = startMapPosition;
		this.endMapPosition = endMapPosition;
		this.markersPerSegment = markersPerSegment;
		this.averageSegmentValue = averageSegmentValue;
	}

	/**
	* Sets the sampleId value for this DerivedDNAcopySegment
	*
	* @param	sampleId	Sample identifier, derived from input
	*	data. Object of class "character".
	*/
	public void setSampleId(String[] sampleId) {
		this.sampleId = sampleId;
	}

	/**
	* Gets the sampleId value for this DerivedDNAcopySegment
	*
	* @return	the value of sampleId
	*	Sample identifier, derived from input
	*	data. Object of class "character".
	*/
	public String[] getSampleId() {
		return sampleId;
	}

	/**
	* Sets the chromosomeIndex value for this DerivedDNAcopySegment
	*
	* @param	chromosomeIndex	Sample identifier, derived from input
	*	data. Object of class "character".
	*/
	public void setChromosomeIndex(String[] chromosomeIndex) {
		this.chromosomeIndex = chromosomeIndex;
	}

	/**
	* Gets the chromosomeIndex value for this DerivedDNAcopySegment
	*
	* @return	the value of chromosomeIndex
	*	Sample identifier, derived from input
	*	data. Object of class "character".
	*/
	public String[] getChromosomeIndex() {
		return chromosomeIndex;
	}

	/**
	* Sets the startMapPosition value for this DerivedDNAcopySegment
	*
	* @param	startMapPosition	Sample identifier, derived from input
	*	data. Object of class "character".
	*/
	public void setStartMapPosition(int[] startMapPosition) {
		this.startMapPosition = startMapPosition;
	}

	/**
	* Gets the startMapPosition value for this DerivedDNAcopySegment
	*
	* @return	the value of startMapPosition
	*	Sample identifier, derived from input
	*	data. Object of class "character".
	*/
	public int[] getStartMapPosition() {
		return startMapPosition;
	}

	/**
	* Sets the endMapPosition value for this DerivedDNAcopySegment
	*
	* @param	endMapPosition	Sample identifier, derived from input
	*	data. Object of class "character".
	*/
	public void setEndMapPosition(int[] endMapPosition) {
		this.endMapPosition = endMapPosition;
	}

	/**
	* Gets the endMapPosition value for this DerivedDNAcopySegment
	*
	* @return	the value of endMapPosition
	*	Sample identifier, derived from input
	*	data. Object of class "character".
	*/
	public int[] getEndMapPosition() {
		return endMapPosition;
	}

	/**
	* Sets the markersPerSegment value for this DerivedDNAcopySegment
	*
	* @param	markersPerSegment	Sample identifier, derived from input
	*	data. Object of class "character".
	*/
	public void setMarkersPerSegment(int[] markersPerSegment) {
		this.markersPerSegment = markersPerSegment;
	}

	/**
	* Gets the markersPerSegment value for this DerivedDNAcopySegment
	*
	* @return	the value of markersPerSegment
	*	Sample identifier, derived from input
	*	data. Object of class "character".
	*/
	public int[] getMarkersPerSegment() {
		return markersPerSegment;
	}

	/**
	* Sets the averageSegmentValue value for this DerivedDNAcopySegment
	*
	* @param	averageSegmentValue	Sample identifier, derived from input
	*	data. Object of class "character".
	*/
	public void setAverageSegmentValue(double[] averageSegmentValue) {
		this.averageSegmentValue = averageSegmentValue;
	}

	/**
	* Gets the averageSegmentValue value for this DerivedDNAcopySegment
	*
	* @return	the value of averageSegmentValue
	*	Sample identifier, derived from input
	*	data. Object of class "character".
	*/
	public double[] getAverageSegmentValue() {
		return averageSegmentValue;
	}

	/**
	* Print this DerivedDNAcopySegment to String
	*
	* @return	contents of DerivedDNAcopySegment as a String
	*/
	public String toString() {
		StringBuffer res=new StringBuffer("{");
		res.append("sampleId=" + java.util.Arrays.toString( sampleId ));
		res.append(", ");
		res.append("chromosomeIndex=" + java.util.Arrays.toString( chromosomeIndex ));
		res.append(", ");
		res.append("startMapPosition=" + java.util.Arrays.toString( startMapPosition ));
		res.append(", ");
		res.append("endMapPosition=" + java.util.Arrays.toString( endMapPosition ));
		res.append(", ");
		res.append("markersPerSegment=" + java.util.Arrays.toString( markersPerSegment ));
		res.append(", ");
		res.append("averageSegmentValue=" + java.util.Arrays.toString( averageSegmentValue ));
		res.append("}");
		return res.toString();
	}

	/**
	* Compare this DerivedDNAcopySegment with the input data.
	*
	* @param inputObject	the data to be compared with.
	* @return	true if the two have the same contents, false otherwise.
	*/
	public boolean equals(Object inputObject) {
		boolean res = getClass().equals(inputObject.getClass());
		if(res){
			DerivedDNAcopySegment obj = (DerivedDNAcopySegment)inputObject;
			Object inputSampleId = obj.getSampleId();
			if((sampleId==null)||(inputSampleId==null))
				res = res&&(sampleId==inputSampleId);
			else
				res = res&&java.util.Arrays.equals(sampleId, (String[])inputSampleId);
			Object inputChromosomeIndex = obj.getChromosomeIndex();
			if((chromosomeIndex==null)||(inputChromosomeIndex==null))
				res = res&&(chromosomeIndex==inputChromosomeIndex);
			else
				res = res&&java.util.Arrays.equals(chromosomeIndex, (String[])inputChromosomeIndex);
			Object inputStartMapPosition = obj.getStartMapPosition();
			if((startMapPosition==null)||(inputStartMapPosition==null))
				res = res&&(startMapPosition==inputStartMapPosition);
			else
				res = res&&java.util.Arrays.equals(startMapPosition, (int[])inputStartMapPosition);
			Object inputEndMapPosition = obj.getEndMapPosition();
			if((endMapPosition==null)||(inputEndMapPosition==null))
				res = res&&(endMapPosition==inputEndMapPosition);
			else
				res = res&&java.util.Arrays.equals(endMapPosition, (int[])inputEndMapPosition);
			Object inputMarkersPerSegment = obj.getMarkersPerSegment();
			if((markersPerSegment==null)||(inputMarkersPerSegment==null))
				res = res&&(markersPerSegment==inputMarkersPerSegment);
			else
				res = res&&java.util.Arrays.equals(markersPerSegment, (int[])inputMarkersPerSegment);
			Object inputAverageSegmentValue = obj.getAverageSegmentValue();
			if((averageSegmentValue==null)||(inputAverageSegmentValue==null))
				res = res&&(averageSegmentValue==inputAverageSegmentValue);
			else
				res = res&&java.util.Arrays.equals(averageSegmentValue, (double[])inputAverageSegmentValue);
		}
		return res;
	}

}
