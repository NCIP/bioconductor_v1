package org.bioconductor.packages.caAffy;

	/**
	* This file was auto-generated by R function 
	* createJavaBean Thu Feb 22 09:34:59 2007. 
	* It represents the S4 Class ProbeLevelLinearModel in R package caAffy. 
	*	This class encapsulates and structures
	*	selected results from fitPLM, as invoked by
	*	object caQAReport in R package caAffy
	*/


public class ProbeLevelLinearModel implements java.io.Serializable  {
	private org.bioconductor.packages.rservices.RJNumericMatrix constrcoefs;
	private org.bioconductor.packages.rservices.RJNumericMatrix serconstrcoefs;
	private String[] cdfName;
	private double[] nrow;
	private double[] ncol;
	private Object[] weights;
	private Object[] residuals;
	private org.bioconductor.packages.rservices.RJNumericMatrix residualSE;
	private org.bioconductor.packages.rservices.RJNumericMatrix normVec;
	private Object[] varcov;
	private org.bioconductor.packages.biobase.MIAME experimentData;
	private String[] annotation;

	public ProbeLevelLinearModel() {
		this.constrcoefs = new org.bioconductor.packages.rservices.RJNumericMatrix();
		this.serconstrcoefs = new org.bioconductor.packages.rservices.RJNumericMatrix();
		this.cdfName = new String[]{};
		this.nrow = new double[]{};
		this.ncol = new double[]{};
		this.weights = new Object[]{};
		this.residuals = new Object[]{};
		this.residualSE = new org.bioconductor.packages.rservices.RJNumericMatrix();
		this.normVec = new org.bioconductor.packages.rservices.RJNumericMatrix();
		this.varcov = new Object[]{};
		this.experimentData = new org.bioconductor.packages.biobase.MIAME();
		this.annotation = new String[]{};
	}

	public ProbeLevelLinearModel(
		org.bioconductor.packages.rservices.RJNumericMatrix constrcoefs,
		org.bioconductor.packages.rservices.RJNumericMatrix serconstrcoefs,
		String[] cdfName,
		double[] nrow,
		double[] ncol,
		Object[] weights,
		Object[] residuals,
		org.bioconductor.packages.rservices.RJNumericMatrix residualSE,
		org.bioconductor.packages.rservices.RJNumericMatrix normVec,
		Object[] varcov,
		org.bioconductor.packages.biobase.MIAME experimentData,
		String[] annotation){

		this.constrcoefs = constrcoefs;
		this.serconstrcoefs = serconstrcoefs;
		this.cdfName = cdfName;
		this.nrow = nrow;
		this.ncol = ncol;
		this.weights = weights;
		this.residuals = residuals;
		this.residualSE = residualSE;
		this.normVec = normVec;
		this.varcov = varcov;
		this.experimentData = experimentData;
		this.annotation = annotation;
	}

	/**
	* Sets the constrcoefs value for this ProbeLevelLinearModel
	*
	* @param	constrcoefs	
	*/
	public void setConstrcoefs(org.bioconductor.packages.rservices.RJNumericMatrix constrcoefs) {
		this.constrcoefs = constrcoefs;
	}

	/**
	* Gets the constrcoefs value for this ProbeLevelLinearModel
	*
	* @return	the value of constrcoefs
	*	
	*/
	public org.bioconductor.packages.rservices.RJNumericMatrix getConstrcoefs() {
		return constrcoefs;
	}

	/**
	* Sets the serconstrcoefs value for this ProbeLevelLinearModel
	*
	* @param	serconstrcoefs	
	*/
	public void setSerconstrcoefs(org.bioconductor.packages.rservices.RJNumericMatrix serconstrcoefs) {
		this.serconstrcoefs = serconstrcoefs;
	}

	/**
	* Gets the serconstrcoefs value for this ProbeLevelLinearModel
	*
	* @return	the value of serconstrcoefs
	*	
	*/
	public org.bioconductor.packages.rservices.RJNumericMatrix getSerconstrcoefs() {
		return serconstrcoefs;
	}

	/**
	* Sets the cdfName value for this ProbeLevelLinearModel
	*
	* @param	cdfName	
	*/
	public void setCdfName(String[] cdfName) {
		this.cdfName = cdfName;
	}

	/**
	* Gets the cdfName value for this ProbeLevelLinearModel
	*
	* @return	the value of cdfName
	*	
	*/
	public String[] getCdfName() {
		return cdfName;
	}

	/**
	* Sets the nrow value for this ProbeLevelLinearModel
	*
	* @param	nrow	
	*/
	public void setNrow(double[] nrow) {
		this.nrow = nrow;
	}

	/**
	* Gets the nrow value for this ProbeLevelLinearModel
	*
	* @return	the value of nrow
	*	
	*/
	public double[] getNrow() {
		return nrow;
	}

	/**
	* Sets the ncol value for this ProbeLevelLinearModel
	*
	* @param	ncol	
	*/
	public void setNcol(double[] ncol) {
		this.ncol = ncol;
	}

	/**
	* Gets the ncol value for this ProbeLevelLinearModel
	*
	* @return	the value of ncol
	*	
	*/
	public double[] getNcol() {
		return ncol;
	}

	/**
	* Sets the weights value for this ProbeLevelLinearModel
	*
	* @param	weights	
	*/
	public void setWeights(Object[] weights) {
		this.weights = weights;
	}

	/**
	* Gets the weights value for this ProbeLevelLinearModel
	*
	* @return	the value of weights
	*	
	*/
	public Object[] getWeights() {
		return weights;
	}

	/**
	* Sets the residuals value for this ProbeLevelLinearModel
	*
	* @param	residuals	
	*/
	public void setResiduals(Object[] residuals) {
		this.residuals = residuals;
	}

	/**
	* Gets the residuals value for this ProbeLevelLinearModel
	*
	* @return	the value of residuals
	*	
	*/
	public Object[] getResiduals() {
		return residuals;
	}

	/**
	* Sets the residualSE value for this ProbeLevelLinearModel
	*
	* @param	residualSE	
	*/
	public void setResidualSE(org.bioconductor.packages.rservices.RJNumericMatrix residualSE) {
		this.residualSE = residualSE;
	}

	/**
	* Gets the residualSE value for this ProbeLevelLinearModel
	*
	* @return	the value of residualSE
	*	
	*/
	public org.bioconductor.packages.rservices.RJNumericMatrix getResidualSE() {
		return residualSE;
	}

	/**
	* Sets the normVec value for this ProbeLevelLinearModel
	*
	* @param	normVec	
	*/
	public void setNormVec(org.bioconductor.packages.rservices.RJNumericMatrix normVec) {
		this.normVec = normVec;
	}

	/**
	* Gets the normVec value for this ProbeLevelLinearModel
	*
	* @return	the value of normVec
	*	
	*/
	public org.bioconductor.packages.rservices.RJNumericMatrix getNormVec() {
		return normVec;
	}

	/**
	* Sets the varcov value for this ProbeLevelLinearModel
	*
	* @param	varcov	
	*/
	public void setVarcov(Object[] varcov) {
		this.varcov = varcov;
	}

	/**
	* Gets the varcov value for this ProbeLevelLinearModel
	*
	* @return	the value of varcov
	*	
	*/
	public Object[] getVarcov() {
		return varcov;
	}

	/**
	* Sets the experimentData value for this ProbeLevelLinearModel
	*
	* @param	experimentData	
	*/
	public void setExperimentData(org.bioconductor.packages.biobase.MIAME experimentData) {
		this.experimentData = experimentData;
	}

	/**
	* Gets the experimentData value for this ProbeLevelLinearModel
	*
	* @return	the value of experimentData
	*	
	*/
	public org.bioconductor.packages.biobase.MIAME getExperimentData() {
		return experimentData;
	}

	/**
	* Sets the annotation value for this ProbeLevelLinearModel
	*
	* @param	annotation	
	*/
	public void setAnnotation(String[] annotation) {
		this.annotation = annotation;
	}

	/**
	* Gets the annotation value for this ProbeLevelLinearModel
	*
	* @return	the value of annotation
	*	
	*/
	public String[] getAnnotation() {
		return annotation;
	}

	/**
	* Print this ProbeLevelLinearModel to String
	*
	* @return	contents of ProbeLevelLinearModel as a String
	*/
	public String toString() {
		StringBuffer res=new StringBuffer("{");
		res.append("constrcoefs=" + String.valueOf( constrcoefs ));
		res.append(", ");
		res.append("serconstrcoefs=" + String.valueOf( serconstrcoefs ));
		res.append(", ");
		res.append("cdfName=" + java.util.Arrays.toString( cdfName ));
		res.append(", ");
		res.append("nrow=" + java.util.Arrays.toString( nrow ));
		res.append(", ");
		res.append("ncol=" + java.util.Arrays.toString( ncol ));
		res.append(", ");
		res.append("weights=" + java.util.Arrays.toString( weights ));
		res.append(", ");
		res.append("residuals=" + java.util.Arrays.toString( residuals ));
		res.append(", ");
		res.append("residualSE=" + String.valueOf( residualSE ));
		res.append(", ");
		res.append("normVec=" + String.valueOf( normVec ));
		res.append(", ");
		res.append("varcov=" + java.util.Arrays.toString( varcov ));
		res.append(", ");
		res.append("experimentData=" + String.valueOf( experimentData ));
		res.append(", ");
		res.append("annotation=" + java.util.Arrays.toString( annotation ));
		res.append("}");
		return res.toString();
	}

	/**
	* Compare this ProbeLevelLinearModel with the input data.
	*
	* @param inputObject	the data to be compared with.
	* @return	true if the two have the same contents, false otherwise.
	*/
	public boolean equals(Object inputObject) {
		boolean res = getClass().equals(inputObject.getClass());
		if(res){
			ProbeLevelLinearModel obj = (ProbeLevelLinearModel)inputObject;
			Object inputConstrcoefs = obj.getConstrcoefs();
			if((constrcoefs==null)||(inputConstrcoefs==null))
				res = res&&(constrcoefs==inputConstrcoefs);
			else
				res = res&&constrcoefs.equals(inputConstrcoefs);
			Object inputSerconstrcoefs = obj.getSerconstrcoefs();
			if((serconstrcoefs==null)||(inputSerconstrcoefs==null))
				res = res&&(serconstrcoefs==inputSerconstrcoefs);
			else
				res = res&&serconstrcoefs.equals(inputSerconstrcoefs);
			Object inputCdfName = obj.getCdfName();
			if((cdfName==null)||(inputCdfName==null))
				res = res&&(cdfName==inputCdfName);
			else
				res = res&&java.util.Arrays.equals(cdfName, (String[])inputCdfName);
			Object inputNrow = obj.getNrow();
			if((nrow==null)||(inputNrow==null))
				res = res&&(nrow==inputNrow);
			else
				res = res&&java.util.Arrays.equals(nrow, (double[])inputNrow);
			Object inputNcol = obj.getNcol();
			if((ncol==null)||(inputNcol==null))
				res = res&&(ncol==inputNcol);
			else
				res = res&&java.util.Arrays.equals(ncol, (double[])inputNcol);
			Object inputWeights = obj.getWeights();
			if((weights==null)||(inputWeights==null))
				res = res&&(weights==inputWeights);
			else
				res = res&&java.util.Arrays.equals(weights, (Object[])inputWeights);
			Object inputResiduals = obj.getResiduals();
			if((residuals==null)||(inputResiduals==null))
				res = res&&(residuals==inputResiduals);
			else
				res = res&&java.util.Arrays.equals(residuals, (Object[])inputResiduals);
			Object inputResidualSE = obj.getResidualSE();
			if((residualSE==null)||(inputResidualSE==null))
				res = res&&(residualSE==inputResidualSE);
			else
				res = res&&residualSE.equals(inputResidualSE);
			Object inputNormVec = obj.getNormVec();
			if((normVec==null)||(inputNormVec==null))
				res = res&&(normVec==inputNormVec);
			else
				res = res&&normVec.equals(inputNormVec);
			Object inputVarcov = obj.getVarcov();
			if((varcov==null)||(inputVarcov==null))
				res = res&&(varcov==inputVarcov);
			else
				res = res&&java.util.Arrays.equals(varcov, (Object[])inputVarcov);
			Object inputExperimentData = obj.getExperimentData();
			if((experimentData==null)||(inputExperimentData==null))
				res = res&&(experimentData==inputExperimentData);
			else
				res = res&&experimentData.equals(inputExperimentData);
			Object inputAnnotation = obj.getAnnotation();
			if((annotation==null)||(inputAnnotation==null))
				res = res&&(annotation==inputAnnotation);
			else
				res = res&&java.util.Arrays.equals(annotation, (String[])inputAnnotation);
		}
		return res;
	}

}
