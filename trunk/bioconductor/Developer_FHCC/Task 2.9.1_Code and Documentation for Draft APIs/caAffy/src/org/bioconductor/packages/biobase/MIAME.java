package org.bioconductor.packages.biobase;

	/**
	* This file was auto-generated by R function 
	* createJavaBean Thu Feb 22 09:34:59 2007. 
	* It represents the S4 Class MIAME in R package Biobase. 
	*	Class MIAME covers MIAME entries that are
	*	not covered by other classes in Bioconductor.
	*	Namely, experimental design, samples,
	*	hybridizations, normalization controls, and
	*	pre-processing information.
	*/


public class MIAME implements java.io.Serializable  {
	private String[] name;
	private String[] lab;
	private String[] contact;
	private String[] title;
	private String[] aabstract;
	private String[] url;
	private String[] pubMedIds;
	private Object[] samples;
	private Object[] hybridizations;
	private Object[] normControls;
	private Object[] preprocessing;
	private Object[] other;
	private org.bioconductor.packages.biobase.Versions r__classVersion__;

	public MIAME() {
		this.name = new String[]{};
		this.lab = new String[]{};
		this.contact = new String[]{};
		this.title = new String[]{};
		this.aabstract = new String[]{};
		this.url = new String[]{};
		this.pubMedIds = new String[]{};
		this.samples = new Object[]{};
		this.hybridizations = new Object[]{};
		this.normControls = new Object[]{};
		this.preprocessing = new Object[]{};
		this.other = new Object[]{};
		this.r__classVersion__ = new org.bioconductor.packages.biobase.Versions();
	}

	public MIAME(
		String[] name,
		String[] lab,
		String[] contact,
		String[] title,
		String[] aabstract,
		String[] url,
		String[] pubMedIds,
		Object[] samples,
		Object[] hybridizations,
		Object[] normControls,
		Object[] preprocessing,
		Object[] other,
		org.bioconductor.packages.biobase.Versions r__classVersion__){

		this.name = name;
		this.lab = lab;
		this.contact = contact;
		this.title = title;
		this.aabstract = aabstract;
		this.url = url;
		this.pubMedIds = pubMedIds;
		this.samples = samples;
		this.hybridizations = hybridizations;
		this.normControls = normControls;
		this.preprocessing = preprocessing;
		this.other = other;
		this.r__classVersion__ = r__classVersion__;
	}

	/**
	* Sets the name value for this MIAME
	*
	* @param	name	Object of class character containing the
	*	experimenter name
	*/
	public void setName(String[] name) {
		this.name = name;
	}

	/**
	* Gets the name value for this MIAME
	*
	* @return	the value of name
	*	Object of class character containing the
	*	experimenter name
	*/
	public String[] getName() {
		return name;
	}

	/**
	* Sets the lab value for this MIAME
	*
	* @param	lab	Object of class character containing the
	*	experimenter name
	*/
	public void setLab(String[] lab) {
		this.lab = lab;
	}

	/**
	* Gets the lab value for this MIAME
	*
	* @return	the value of lab
	*	Object of class character containing the
	*	experimenter name
	*/
	public String[] getLab() {
		return lab;
	}

	/**
	* Sets the contact value for this MIAME
	*
	* @param	contact	Object of class character containing the
	*	experimenter name
	*/
	public void setContact(String[] contact) {
		this.contact = contact;
	}

	/**
	* Gets the contact value for this MIAME
	*
	* @return	the value of contact
	*	Object of class character containing the
	*	experimenter name
	*/
	public String[] getContact() {
		return contact;
	}

	/**
	* Sets the title value for this MIAME
	*
	* @param	title	Object of class character containing the
	*	experimenter name
	*/
	public void setTitle(String[] title) {
		this.title = title;
	}

	/**
	* Gets the title value for this MIAME
	*
	* @return	the value of title
	*	Object of class character containing the
	*	experimenter name
	*/
	public String[] getTitle() {
		return title;
	}

	/**
	* Sets the aabstract value for this MIAME
	*
	* @param	aabstract	Object of class character containing the
	*	experimenter name
	*/
	public void setAabstract(String[] aabstract) {
		this.aabstract = aabstract;
	}

	/**
	* Gets the aabstract value for this MIAME
	*
	* @return	the value of aabstract
	*	Object of class character containing the
	*	experimenter name
	*/
	public String[] getAabstract() {
		return aabstract;
	}

	/**
	* Sets the url value for this MIAME
	*
	* @param	url	Object of class character containing the
	*	experimenter name
	*/
	public void setUrl(String[] url) {
		this.url = url;
	}

	/**
	* Gets the url value for this MIAME
	*
	* @return	the value of url
	*	Object of class character containing the
	*	experimenter name
	*/
	public String[] getUrl() {
		return url;
	}

	/**
	* Sets the pubMedIds value for this MIAME
	*
	* @param	pubMedIds	Object of class character containing the
	*	experimenter name
	*/
	public void setPubMedIds(String[] pubMedIds) {
		this.pubMedIds = pubMedIds;
	}

	/**
	* Gets the pubMedIds value for this MIAME
	*
	* @return	the value of pubMedIds
	*	Object of class character containing the
	*	experimenter name
	*/
	public String[] getPubMedIds() {
		return pubMedIds;
	}

	/**
	* Sets the samples value for this MIAME
	*
	* @param	samples	Object of class character containing the
	*	experimenter name
	*/
	public void setSamples(Object[] samples) {
		this.samples = samples;
	}

	/**
	* Gets the samples value for this MIAME
	*
	* @return	the value of samples
	*	Object of class character containing the
	*	experimenter name
	*/
	public Object[] getSamples() {
		return samples;
	}

	/**
	* Sets the hybridizations value for this MIAME
	*
	* @param	hybridizations	Object of class character containing the
	*	experimenter name
	*/
	public void setHybridizations(Object[] hybridizations) {
		this.hybridizations = hybridizations;
	}

	/**
	* Gets the hybridizations value for this MIAME
	*
	* @return	the value of hybridizations
	*	Object of class character containing the
	*	experimenter name
	*/
	public Object[] getHybridizations() {
		return hybridizations;
	}

	/**
	* Sets the normControls value for this MIAME
	*
	* @param	normControls	Object of class character containing the
	*	experimenter name
	*/
	public void setNormControls(Object[] normControls) {
		this.normControls = normControls;
	}

	/**
	* Gets the normControls value for this MIAME
	*
	* @return	the value of normControls
	*	Object of class character containing the
	*	experimenter name
	*/
	public Object[] getNormControls() {
		return normControls;
	}

	/**
	* Sets the preprocessing value for this MIAME
	*
	* @param	preprocessing	Object of class character containing the
	*	experimenter name
	*/
	public void setPreprocessing(Object[] preprocessing) {
		this.preprocessing = preprocessing;
	}

	/**
	* Gets the preprocessing value for this MIAME
	*
	* @return	the value of preprocessing
	*	Object of class character containing the
	*	experimenter name
	*/
	public Object[] getPreprocessing() {
		return preprocessing;
	}

	/**
	* Sets the other value for this MIAME
	*
	* @param	other	Object of class character containing the
	*	experimenter name
	*/
	public void setOther(Object[] other) {
		this.other = other;
	}

	/**
	* Gets the other value for this MIAME
	*
	* @return	the value of other
	*	Object of class character containing the
	*	experimenter name
	*/
	public Object[] getOther() {
		return other;
	}

	/**
	* Sets the r__classVersion__ value for this MIAME
	*
	* @param	r__classVersion__	Object of class character containing the
	*	experimenter name
	*/
	public void setR__classVersion__(org.bioconductor.packages.biobase.Versions r__classVersion__) {
		this.r__classVersion__ = r__classVersion__;
	}

	/**
	* Gets the r__classVersion__ value for this MIAME
	*
	* @return	the value of r__classVersion__
	*	Object of class character containing the
	*	experimenter name
	*/
	public org.bioconductor.packages.biobase.Versions getR__classVersion__() {
		return r__classVersion__;
	}

	/**
	* Print this MIAME to String
	*
	* @return	contents of MIAME as a String
	*/
	public String toString() {
		StringBuffer res=new StringBuffer("{");
		res.append("name=" + java.util.Arrays.toString( name ));
		res.append(", ");
		res.append("lab=" + java.util.Arrays.toString( lab ));
		res.append(", ");
		res.append("contact=" + java.util.Arrays.toString( contact ));
		res.append(", ");
		res.append("title=" + java.util.Arrays.toString( title ));
		res.append(", ");
		res.append("aabstract=" + java.util.Arrays.toString( aabstract ));
		res.append(", ");
		res.append("url=" + java.util.Arrays.toString( url ));
		res.append(", ");
		res.append("pubMedIds=" + java.util.Arrays.toString( pubMedIds ));
		res.append(", ");
		res.append("samples=" + java.util.Arrays.toString( samples ));
		res.append(", ");
		res.append("hybridizations=" + java.util.Arrays.toString( hybridizations ));
		res.append(", ");
		res.append("normControls=" + java.util.Arrays.toString( normControls ));
		res.append(", ");
		res.append("preprocessing=" + java.util.Arrays.toString( preprocessing ));
		res.append(", ");
		res.append("other=" + java.util.Arrays.toString( other ));
		res.append(", ");
		res.append("r__classVersion__=" + String.valueOf( r__classVersion__ ));
		res.append("}");
		return res.toString();
	}

	/**
	* Compare this MIAME with the input data.
	*
	* @param inputObject	the data to be compared with.
	* @return	true if the two have the same contents, false otherwise.
	*/
	public boolean equals(Object inputObject) {
		boolean res = getClass().equals(inputObject.getClass());
		if(res){
			MIAME obj = (MIAME)inputObject;
			Object inputName = obj.getName();
			if((name==null)||(inputName==null))
				res = res&&(name==inputName);
			else
				res = res&&java.util.Arrays.equals(name, (String[])inputName);
			Object inputLab = obj.getLab();
			if((lab==null)||(inputLab==null))
				res = res&&(lab==inputLab);
			else
				res = res&&java.util.Arrays.equals(lab, (String[])inputLab);
			Object inputContact = obj.getContact();
			if((contact==null)||(inputContact==null))
				res = res&&(contact==inputContact);
			else
				res = res&&java.util.Arrays.equals(contact, (String[])inputContact);
			Object inputTitle = obj.getTitle();
			if((title==null)||(inputTitle==null))
				res = res&&(title==inputTitle);
			else
				res = res&&java.util.Arrays.equals(title, (String[])inputTitle);
			Object inputAabstract = obj.getAabstract();
			if((aabstract==null)||(inputAabstract==null))
				res = res&&(aabstract==inputAabstract);
			else
				res = res&&java.util.Arrays.equals(aabstract, (String[])inputAabstract);
			Object inputUrl = obj.getUrl();
			if((url==null)||(inputUrl==null))
				res = res&&(url==inputUrl);
			else
				res = res&&java.util.Arrays.equals(url, (String[])inputUrl);
			Object inputPubMedIds = obj.getPubMedIds();
			if((pubMedIds==null)||(inputPubMedIds==null))
				res = res&&(pubMedIds==inputPubMedIds);
			else
				res = res&&java.util.Arrays.equals(pubMedIds, (String[])inputPubMedIds);
			Object inputSamples = obj.getSamples();
			if((samples==null)||(inputSamples==null))
				res = res&&(samples==inputSamples);
			else
				res = res&&java.util.Arrays.equals(samples, (Object[])inputSamples);
			Object inputHybridizations = obj.getHybridizations();
			if((hybridizations==null)||(inputHybridizations==null))
				res = res&&(hybridizations==inputHybridizations);
			else
				res = res&&java.util.Arrays.equals(hybridizations, (Object[])inputHybridizations);
			Object inputNormControls = obj.getNormControls();
			if((normControls==null)||(inputNormControls==null))
				res = res&&(normControls==inputNormControls);
			else
				res = res&&java.util.Arrays.equals(normControls, (Object[])inputNormControls);
			Object inputPreprocessing = obj.getPreprocessing();
			if((preprocessing==null)||(inputPreprocessing==null))
				res = res&&(preprocessing==inputPreprocessing);
			else
				res = res&&java.util.Arrays.equals(preprocessing, (Object[])inputPreprocessing);
			Object inputOther = obj.getOther();
			if((other==null)||(inputOther==null))
				res = res&&(other==inputOther);
			else
				res = res&&java.util.Arrays.equals(other, (Object[])inputOther);
			Object inputR__classVersion__ = obj.getR__classVersion__();
			if((r__classVersion__==null)||(inputR__classVersion__==null))
				res = res&&(r__classVersion__==inputR__classVersion__);
			else
				res = res&&r__classVersion__.equals(inputR__classVersion__);
		}
		return res;
	}

}
