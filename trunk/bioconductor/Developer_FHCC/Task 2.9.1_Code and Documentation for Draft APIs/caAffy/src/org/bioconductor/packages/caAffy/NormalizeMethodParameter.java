package org.bioconductor.packages.caAffy;

	/**
	* This file was auto-generated by R function 
	* createJavaBean Wed Feb 28 09:49:05 2007. 
	* It represents the S4 Class NormalizeMethodParameter in R package caAffy. 
	*	These classes influences evaluation of
	*	object caExpresso in R package caAffy.
	*/


public class NormalizeMethodParameter implements java.io.Serializable  {
	private String[] probeType;
	private String[] method;

	public NormalizeMethodParameter() {
		this.probeType = new String[]{"separate"};
		this.method = new String[]{"constant"};
	}

	public NormalizeMethodParameter(
		String[] probeType,
		String[] method){

		this.probeType = probeType;
		this.method = method;
	}

	/**
	* Sets the probeType value for this NormalizeMethodParameter
	*
	* @param	probeType	
	*/
	public void setProbeType(String[] probeType) {
		this.probeType = probeType;
	}

	/**
	* Gets the probeType value for this NormalizeMethodParameter
	*
	* @return	the value of probeType
	*	
	*/
	public String[] getProbeType() {
		return probeType;
	}

	/**
	* Sets the method value for this NormalizeMethodParameter
	*
	* @param	method	
	*/
	public void setMethod(String[] method) {
		this.method = method;
	}

	/**
	* Gets the method value for this NormalizeMethodParameter
	*
	* @return	the value of method
	*	
	*/
	public String[] getMethod() {
		return method;
	}

	/**
	* Print this NormalizeMethodParameter to String
	*
	* @return	contents of NormalizeMethodParameter as a String
	*/
	public String toString() {
		StringBuffer res=new StringBuffer("{");
		res.append("probeType=" + java.util.Arrays.toString( probeType ));
		res.append(", ");
		res.append("method=" + java.util.Arrays.toString( method ));
		res.append("}");
		return res.toString();
	}

	/**
	* Compare this NormalizeMethodParameter with the input data.
	*
	* @param inputObject	the data to be compared with.
	* @return	true if the two have the same contents, false otherwise.
	*/
	public boolean equals(Object inputObject) {
		boolean res = getClass().equals(inputObject.getClass());
		if(res){
			NormalizeMethodParameter obj = (NormalizeMethodParameter)inputObject;
			Object inputProbeType = obj.getProbeType();
			if((probeType==null)||(inputProbeType==null))
				res = res&&(probeType==inputProbeType);
			else
				res = res&&java.util.Arrays.equals(probeType, (String[])inputProbeType);
			Object inputMethod = obj.getMethod();
			if((method==null)||(inputMethod==null))
				res = res&&(method==inputMethod);
			else
				res = res&&java.util.Arrays.equals(method, (String[])inputMethod);
		}
		return res;
	}

}
