package org.bioconductor.packages.caPROcess;

	/**
	* This file was auto-generated by R function 
	* createJavaBean Mon Jan 22 14:12:15 2007. 
	* It represents the S4 Class PROcessParameter in R package caPROcess. 
	*/


public class PROcessParameter implements java.io.Serializable  {
	private double[] renormalizationCutoff;
	private double[] peakSignalToNoiseCutoff;
	private double[] peakVarianceDetectionSpan;
	private double[] peakSmoothingSpan;
	private double[] peakZeroCutoff;
	private double[] peakAreaNeighborhood;
	private double[] peakAreaRetention;

	public PROcessParameter() {
		this.renormalizationCutoff = new double[]{};
		this.peakSignalToNoiseCutoff = new double[]{};
		this.peakVarianceDetectionSpan = new double[]{};
		this.peakSmoothingSpan = new double[]{};
		this.peakZeroCutoff = new double[]{};
		this.peakAreaNeighborhood = new double[]{};
		this.peakAreaRetention = new double[]{};
	}

	public PROcessParameter(
		double[] renormalizationCutoff,
		double[] peakSignalToNoiseCutoff,
		double[] peakVarianceDetectionSpan,
		double[] peakSmoothingSpan,
		double[] peakZeroCutoff,
		double[] peakAreaNeighborhood,
		double[] peakAreaRetention){

		this.renormalizationCutoff = renormalizationCutoff;
		this.peakSignalToNoiseCutoff = peakSignalToNoiseCutoff;
		this.peakVarianceDetectionSpan = peakVarianceDetectionSpan;
		this.peakSmoothingSpan = peakSmoothingSpan;
		this.peakZeroCutoff = peakZeroCutoff;
		this.peakAreaNeighborhood = peakAreaNeighborhood;
		this.peakAreaRetention = peakAreaRetention;
	}

	/**
	* Sets the renormalizationCutoff value for this PROcessParameter
	*
	* @param	renormalizationCutoff	
	*/
	public void setRenormalizationCutoff(double[] renormalizationCutoff) {
		this.renormalizationCutoff = renormalizationCutoff;
	}

	/**
	* Gets the renormalizationCutoff value for this PROcessParameter
	*
	* @return	the value of renormalizationCutoff
	*	
	*/
	public double[] getRenormalizationCutoff() {
		return renormalizationCutoff;
	}

	/**
	* Sets the peakSignalToNoiseCutoff value for this PROcessParameter
	*
	* @param	peakSignalToNoiseCutoff	
	*/
	public void setPeakSignalToNoiseCutoff(double[] peakSignalToNoiseCutoff) {
		this.peakSignalToNoiseCutoff = peakSignalToNoiseCutoff;
	}

	/**
	* Gets the peakSignalToNoiseCutoff value for this PROcessParameter
	*
	* @return	the value of peakSignalToNoiseCutoff
	*	
	*/
	public double[] getPeakSignalToNoiseCutoff() {
		return peakSignalToNoiseCutoff;
	}

	/**
	* Sets the peakVarianceDetectionSpan value for this PROcessParameter
	*
	* @param	peakVarianceDetectionSpan	
	*/
	public void setPeakVarianceDetectionSpan(double[] peakVarianceDetectionSpan) {
		this.peakVarianceDetectionSpan = peakVarianceDetectionSpan;
	}

	/**
	* Gets the peakVarianceDetectionSpan value for this PROcessParameter
	*
	* @return	the value of peakVarianceDetectionSpan
	*	
	*/
	public double[] getPeakVarianceDetectionSpan() {
		return peakVarianceDetectionSpan;
	}

	/**
	* Sets the peakSmoothingSpan value for this PROcessParameter
	*
	* @param	peakSmoothingSpan	
	*/
	public void setPeakSmoothingSpan(double[] peakSmoothingSpan) {
		this.peakSmoothingSpan = peakSmoothingSpan;
	}

	/**
	* Gets the peakSmoothingSpan value for this PROcessParameter
	*
	* @return	the value of peakSmoothingSpan
	*	
	*/
	public double[] getPeakSmoothingSpan() {
		return peakSmoothingSpan;
	}

	/**
	* Sets the peakZeroCutoff value for this PROcessParameter
	*
	* @param	peakZeroCutoff	
	*/
	public void setPeakZeroCutoff(double[] peakZeroCutoff) {
		this.peakZeroCutoff = peakZeroCutoff;
	}

	/**
	* Gets the peakZeroCutoff value for this PROcessParameter
	*
	* @return	the value of peakZeroCutoff
	*	
	*/
	public double[] getPeakZeroCutoff() {
		return peakZeroCutoff;
	}

	/**
	* Sets the peakAreaNeighborhood value for this PROcessParameter
	*
	* @param	peakAreaNeighborhood	
	*/
	public void setPeakAreaNeighborhood(double[] peakAreaNeighborhood) {
		this.peakAreaNeighborhood = peakAreaNeighborhood;
	}

	/**
	* Gets the peakAreaNeighborhood value for this PROcessParameter
	*
	* @return	the value of peakAreaNeighborhood
	*	
	*/
	public double[] getPeakAreaNeighborhood() {
		return peakAreaNeighborhood;
	}

	/**
	* Sets the peakAreaRetention value for this PROcessParameter
	*
	* @param	peakAreaRetention	
	*/
	public void setPeakAreaRetention(double[] peakAreaRetention) {
		this.peakAreaRetention = peakAreaRetention;
	}

	/**
	* Gets the peakAreaRetention value for this PROcessParameter
	*
	* @return	the value of peakAreaRetention
	*	
	*/
	public double[] getPeakAreaRetention() {
		return peakAreaRetention;
	}

	/**
	* Print this PROcessParameter to String
	*
	* @return	contents of PROcessParameter as a String
	*/
	public String toString() {
		StringBuffer res=new StringBuffer("{");
		res.append("renormalizationCutoff=" + java.util.Arrays.toString( renormalizationCutoff ));
		res.append(", ");
		res.append("peakSignalToNoiseCutoff=" + java.util.Arrays.toString( peakSignalToNoiseCutoff ));
		res.append(", ");
		res.append("peakVarianceDetectionSpan=" + java.util.Arrays.toString( peakVarianceDetectionSpan ));
		res.append(", ");
		res.append("peakSmoothingSpan=" + java.util.Arrays.toString( peakSmoothingSpan ));
		res.append(", ");
		res.append("peakZeroCutoff=" + java.util.Arrays.toString( peakZeroCutoff ));
		res.append(", ");
		res.append("peakAreaNeighborhood=" + java.util.Arrays.toString( peakAreaNeighborhood ));
		res.append(", ");
		res.append("peakAreaRetention=" + java.util.Arrays.toString( peakAreaRetention ));
		res.append("}");
		return res.toString();
	}

	/**
	* Compare this PROcessParameter with the input data.
	*
	* @param inputObject	the data to be compared with.
	* @return	true if the two have the same contents, false otherwise.
	*/
	public boolean equals(Object inputObject) {
		boolean res = getClass().equals(inputObject.getClass());
		if(res){
			PROcessParameter obj = (PROcessParameter)inputObject;
			Object inputRenormalizationCutoff = obj.getRenormalizationCutoff();
			if((renormalizationCutoff==null)||(inputRenormalizationCutoff==null))
				res = res&&(renormalizationCutoff==inputRenormalizationCutoff);
			else
				res = res&&java.util.Arrays.equals(renormalizationCutoff, (double[])inputRenormalizationCutoff);
			Object inputPeakSignalToNoiseCutoff = obj.getPeakSignalToNoiseCutoff();
			if((peakSignalToNoiseCutoff==null)||(inputPeakSignalToNoiseCutoff==null))
				res = res&&(peakSignalToNoiseCutoff==inputPeakSignalToNoiseCutoff);
			else
				res = res&&java.util.Arrays.equals(peakSignalToNoiseCutoff, (double[])inputPeakSignalToNoiseCutoff);
			Object inputPeakVarianceDetectionSpan = obj.getPeakVarianceDetectionSpan();
			if((peakVarianceDetectionSpan==null)||(inputPeakVarianceDetectionSpan==null))
				res = res&&(peakVarianceDetectionSpan==inputPeakVarianceDetectionSpan);
			else
				res = res&&java.util.Arrays.equals(peakVarianceDetectionSpan, (double[])inputPeakVarianceDetectionSpan);
			Object inputPeakSmoothingSpan = obj.getPeakSmoothingSpan();
			if((peakSmoothingSpan==null)||(inputPeakSmoothingSpan==null))
				res = res&&(peakSmoothingSpan==inputPeakSmoothingSpan);
			else
				res = res&&java.util.Arrays.equals(peakSmoothingSpan, (double[])inputPeakSmoothingSpan);
			Object inputPeakZeroCutoff = obj.getPeakZeroCutoff();
			if((peakZeroCutoff==null)||(inputPeakZeroCutoff==null))
				res = res&&(peakZeroCutoff==inputPeakZeroCutoff);
			else
				res = res&&java.util.Arrays.equals(peakZeroCutoff, (double[])inputPeakZeroCutoff);
			Object inputPeakAreaNeighborhood = obj.getPeakAreaNeighborhood();
			if((peakAreaNeighborhood==null)||(inputPeakAreaNeighborhood==null))
				res = res&&(peakAreaNeighborhood==inputPeakAreaNeighborhood);
			else
				res = res&&java.util.Arrays.equals(peakAreaNeighborhood, (double[])inputPeakAreaNeighborhood);
			Object inputPeakAreaRetention = obj.getPeakAreaRetention();
			if((peakAreaRetention==null)||(inputPeakAreaRetention==null))
				res = res&&(peakAreaRetention==inputPeakAreaRetention);
			else
				res = res&&java.util.Arrays.equals(peakAreaRetention, (double[])inputPeakAreaRetention);
		}
		return res;
	}

}
