package org.bioconductor.packages.caGeneFilter;

	/**
	* This file was auto-generated by R function 
	* createJavaBean Mon Mar 30 14:04:02 2009. 
	* It represents the S4 Class SpotQualityRecode in R package caGeneFilter. 
	*/


public class SpotQualityRecode extends Recode implements java.io.Serializable  {
	private String[] columnIdentifier;
	private double[] columnMinimumThresholdValue;
	private double[] recodeValue;

	public SpotQualityRecode() {
		this.columnIdentifier = new String[]{};
		this.columnMinimumThresholdValue = new double[]{};
		this.recodeValue = new double[]{};
	}

	public SpotQualityRecode(
		String[] columnIdentifier,
		double[] columnMinimumThresholdValue,
		double[] recodeValue){

		this.columnIdentifier = columnIdentifier;
		this.columnMinimumThresholdValue = columnMinimumThresholdValue;
		this.recodeValue = recodeValue;
	}

	/**
	* Sets the columnIdentifier value for this SpotQualityRecode
	*
	* @param	columnIdentifier	
	*/
	public void setColumnIdentifier(String[] columnIdentifier) {
		this.columnIdentifier = columnIdentifier;
	}

	/**
	* Gets the columnIdentifier value for this SpotQualityRecode
	*
	* @return	the value of columnIdentifier
	*	
	*/
	public String[] getColumnIdentifier() {
		return columnIdentifier;
	}

	/**
	* Sets the columnMinimumThresholdValue value for this SpotQualityRecode
	*
	* @param	columnMinimumThresholdValue	
	*/
	public void setColumnMinimumThresholdValue(double[] columnMinimumThresholdValue) {
		this.columnMinimumThresholdValue = columnMinimumThresholdValue;
	}

	/**
	* Gets the columnMinimumThresholdValue value for this SpotQualityRecode
	*
	* @return	the value of columnMinimumThresholdValue
	*	
	*/
	public double[] getColumnMinimumThresholdValue() {
		return columnMinimumThresholdValue;
	}

	/**
	* Sets the recodeValue value for this SpotQualityRecode
	*
	* @param	recodeValue	
	*/
	public void setRecodeValue(double[] recodeValue) {
		this.recodeValue = recodeValue;
	}

	/**
	* Gets the recodeValue value for this SpotQualityRecode
	*
	* @return	the value of recodeValue
	*	
	*/
	public double[] getRecodeValue() {
		return recodeValue;
	}

	/**
	* Print this SpotQualityRecode to String
	*
	* @return	contents of SpotQualityRecode as a String
	*/
	public String toString() {
		StringBuffer res=new StringBuffer("{");
		res.append("columnIdentifier=" + java.util.Arrays.toString( columnIdentifier ));
		res.append(", ");
		res.append("columnMinimumThresholdValue=" + java.util.Arrays.toString( columnMinimumThresholdValue ));
		res.append(", ");
		res.append("recodeValue=" + java.util.Arrays.toString( recodeValue ));
		res.append("}");
		return res.toString();
	}

	/**
	* Compare this SpotQualityRecode with the input data.
	*
	* @param inputObject	the data to be compared with.
	* @return	true if the two have the same contents, false otherwise.
	*/
	public boolean equals(Object inputObject) {
		boolean res = getClass().equals(inputObject.getClass());
		if(res){
			SpotQualityRecode obj = (SpotQualityRecode)inputObject;
			Object inputColumnIdentifier = obj.getColumnIdentifier();
			if((columnIdentifier==null)||(inputColumnIdentifier==null))
				res = res&&(columnIdentifier==inputColumnIdentifier);
			else
				res = res&&java.util.Arrays.equals(columnIdentifier, (String[])inputColumnIdentifier);
			Object inputColumnMinimumThresholdValue = obj.getColumnMinimumThresholdValue();
			if((columnMinimumThresholdValue==null)||(inputColumnMinimumThresholdValue==null))
				res = res&&(columnMinimumThresholdValue==inputColumnMinimumThresholdValue);
			else
				res = res&&java.util.Arrays.equals(columnMinimumThresholdValue, (double[])inputColumnMinimumThresholdValue);
			Object inputRecodeValue = obj.getRecodeValue();
			if((recodeValue==null)||(inputRecodeValue==null))
				res = res&&(recodeValue==inputRecodeValue);
			else
				res = res&&java.util.Arrays.equals(recodeValue, (double[])inputRecodeValue);
		}
		return res;
	}

}
