package org.bioconductor.packages.caGeneFilter;

	/**
	* This file was auto-generated by R function 
	* createJavaBean Mon Mar 30 14:04:02 2009. 
	* It represents the S4 Class GOFilter in R package caGeneFilter. 
	*/


public class GOFilter extends Filter implements java.io.Serializable  {
	private boolean[] GOBP;
	private boolean[] GOCC;
	private boolean[] GOMF;
	private String[] annotation;

	public GOFilter() {
		this.GOBP = new boolean[]{};
		this.GOCC = new boolean[]{};
		this.GOMF = new boolean[]{};
		this.annotation = new String[]{};
	}

	public GOFilter(
		boolean[] GOBP,
		boolean[] GOCC,
		boolean[] GOMF,
		String[] annotation){

		this.GOBP = GOBP;
		this.GOCC = GOCC;
		this.GOMF = GOMF;
		this.annotation = annotation;
	}

	/**
	* Sets the GOBP value for this GOFilter
	*
	* @param	GOBP	
	*/
	public void setGOBP(boolean[] GOBP) {
		this.GOBP = GOBP;
	}

	/**
	* Gets the GOBP value for this GOFilter
	*
	* @return	the value of GOBP
	*	
	*/
	public boolean[] getGOBP() {
		return GOBP;
	}

	/**
	* Sets the GOCC value for this GOFilter
	*
	* @param	GOCC	
	*/
	public void setGOCC(boolean[] GOCC) {
		this.GOCC = GOCC;
	}

	/**
	* Gets the GOCC value for this GOFilter
	*
	* @return	the value of GOCC
	*	
	*/
	public boolean[] getGOCC() {
		return GOCC;
	}

	/**
	* Sets the GOMF value for this GOFilter
	*
	* @param	GOMF	
	*/
	public void setGOMF(boolean[] GOMF) {
		this.GOMF = GOMF;
	}

	/**
	* Gets the GOMF value for this GOFilter
	*
	* @return	the value of GOMF
	*	
	*/
	public boolean[] getGOMF() {
		return GOMF;
	}

	/**
	* Sets the annotation value for this GOFilter
	*
	* @param	annotation	
	*/
	public void setAnnotation(String[] annotation) {
		this.annotation = annotation;
	}

	/**
	* Gets the annotation value for this GOFilter
	*
	* @return	the value of annotation
	*	
	*/
	public String[] getAnnotation() {
		return annotation;
	}

	/**
	* Print this GOFilter to String
	*
	* @return	contents of GOFilter as a String
	*/
	public String toString() {
		StringBuffer res=new StringBuffer("{");
		res.append("GOBP=" + java.util.Arrays.toString( GOBP ));
		res.append(", ");
		res.append("GOCC=" + java.util.Arrays.toString( GOCC ));
		res.append(", ");
		res.append("GOMF=" + java.util.Arrays.toString( GOMF ));
		res.append(", ");
		res.append("annotation=" + java.util.Arrays.toString( annotation ));
		res.append("}");
		return res.toString();
	}

	/**
	* Compare this GOFilter with the input data.
	*
	* @param inputObject	the data to be compared with.
	* @return	true if the two have the same contents, false otherwise.
	*/
	public boolean equals(Object inputObject) {
		boolean res = getClass().equals(inputObject.getClass());
		if(res){
			GOFilter obj = (GOFilter)inputObject;
			Object inputGOBP = obj.getGOBP();
			if((GOBP==null)||(inputGOBP==null))
				res = res&&(GOBP==inputGOBP);
			else
				res = res&&java.util.Arrays.equals(GOBP, (boolean[])inputGOBP);
			Object inputGOCC = obj.getGOCC();
			if((GOCC==null)||(inputGOCC==null))
				res = res&&(GOCC==inputGOCC);
			else
				res = res&&java.util.Arrays.equals(GOCC, (boolean[])inputGOCC);
			Object inputGOMF = obj.getGOMF();
			if((GOMF==null)||(inputGOMF==null))
				res = res&&(GOMF==inputGOMF);
			else
				res = res&&java.util.Arrays.equals(GOMF, (boolean[])inputGOMF);
			Object inputAnnotation = obj.getAnnotation();
			if((annotation==null)||(inputAnnotation==null))
				res = res&&(annotation==inputAnnotation);
			else
				res = res&&java.util.Arrays.equals(annotation, (String[])inputAnnotation);
		}
		return res;
	}

}
