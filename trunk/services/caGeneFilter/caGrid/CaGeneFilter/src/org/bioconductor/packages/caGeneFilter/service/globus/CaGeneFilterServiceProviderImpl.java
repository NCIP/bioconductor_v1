package org.bioconductor.packages.caGeneFilter.service.globus;

import org.bioconductor.packages.caGeneFilter.service.CaGeneFilterServiceImpl;

import java.rmi.RemoteException;

/** 
 * DO NOT EDIT:  This class is autogenerated!
 *
 * This class implements each method in the portType of the service.  Each method call represented
 * in the port type will be then mapped into the unwrapped implementation which the user provides
 * in the CaGeneFilterServiceImpl class.  This class handles the boxing and unboxing of each method call
 * so that it can be correclty mapped in the unboxed interface that the developer has designed and 
 * has implemented.  Authorization callbacks are automatically made for each method based
 * on each methods authorization requirements.
 * 
 * @created by Introduce Toolkit version 1.2
 * 
 */
public class CaGeneFilterServiceProviderImpl{
	
	CaGeneFilterServiceImpl impl;
	
	public CaGeneFilterServiceProviderImpl() throws RemoteException {
		impl = new CaGeneFilterServiceImpl();
	}
	

    public org.bioconductor.packages.caGeneFilter.stubs.GetRpackageSessionInfoResponse getRpackageSessionInfo(org.bioconductor.packages.caGeneFilter.stubs.GetRpackageSessionInfoRequest params) throws RemoteException {
    org.bioconductor.packages.caGeneFilter.stubs.GetRpackageSessionInfoResponse boxedResult = new org.bioconductor.packages.caGeneFilter.stubs.GetRpackageSessionInfoResponse();
    boxedResult.setResponse(impl.getRpackageSessionInfo());
    return boxedResult;
  }

    public org.bioconductor.packages.caGeneFilter.stubs.RecodeResponse recode(org.bioconductor.packages.caGeneFilter.stubs.RecodeRequest params) throws RemoteException {
    org.bioconductor.packages.caGeneFilter.stubs.RecodeResponse boxedResult = new org.bioconductor.packages.caGeneFilter.stubs.RecodeResponse();
    boxedResult.setSingleChannelExpressionDataCollection(impl.recode(params.getDataCollection().getSingleChannelExpressionDataCollection(),params.getRecode().getRecode()));
    return boxedResult;
  }

    public org.bioconductor.packages.caGeneFilter.stubs.FilterResponse filter(org.bioconductor.packages.caGeneFilter.stubs.FilterRequest params) throws RemoteException {
    org.bioconductor.packages.caGeneFilter.stubs.FilterResponse boxedResult = new org.bioconductor.packages.caGeneFilter.stubs.FilterResponse();
    boxedResult.setSingleChannelExpressionDataCollection(impl.filter(params.getSingleChannelExpressionDataCollection().getSingleChannelExpressionDataCollection(),params.getFilter().getFilter()));
    return boxedResult;
  }

    public org.bioconductor.packages.caGeneFilter.stubs.CreateFileRecodeSessionResponse createFileRecodeSession(org.bioconductor.packages.caGeneFilter.stubs.CreateFileRecodeSessionRequest params) throws RemoteException {
    org.bioconductor.packages.caGeneFilter.stubs.CreateFileRecodeSessionResponse boxedResult = new org.bioconductor.packages.caGeneFilter.stubs.CreateFileRecodeSessionResponse();
    boxedResult.setSessionEndpoint(impl.createFileRecodeSession());
    return boxedResult;
  }

    public org.bioconductor.packages.caGeneFilter.stubs.GetUploadManufacturerFileReferencesResponse getUploadManufacturerFileReferences(org.bioconductor.packages.caGeneFilter.stubs.GetUploadManufacturerFileReferencesRequest params) throws RemoteException {
    org.bioconductor.packages.caGeneFilter.stubs.GetUploadManufacturerFileReferencesResponse boxedResult = new org.bioconductor.packages.caGeneFilter.stubs.GetUploadManufacturerFileReferencesResponse();
    boxedResult.setManufacturerFileReferences(impl.getUploadManufacturerFileReferences(params.getSessionEndpoint().getSessionEndpoint(),params.getFileReferences().getFileReferences()));
    return boxedResult;
  }

    public org.bioconductor.packages.caGeneFilter.stubs.FileRecodeResponse fileRecode(org.bioconductor.packages.caGeneFilter.stubs.FileRecodeRequest params) throws RemoteException {
    org.bioconductor.packages.caGeneFilter.stubs.FileRecodeResponse boxedResult = new org.bioconductor.packages.caGeneFilter.stubs.FileRecodeResponse();
    boxedResult.setTwoChannelExpressionDataCollection(impl.fileRecode(params.getSessionEndpoint().getSessionEndpoint(),params.getSpotQualityRecode().getSpotQualityRecode()));
    return boxedResult;
  }

}
