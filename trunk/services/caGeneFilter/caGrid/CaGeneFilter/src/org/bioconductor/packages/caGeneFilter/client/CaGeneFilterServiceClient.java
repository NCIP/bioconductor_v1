package org.bioconductor.packages.caGeneFilter.client;

import java.io.InputStream;
import java.rmi.RemoteException;

import javax.xml.namespace.QName;

import org.apache.axis.EngineConfiguration;
import org.apache.axis.client.AxisClient;
import org.apache.axis.client.Stub;
import org.apache.axis.configuration.FileProvider;
import org.apache.axis.message.addressing.EndpointReferenceType;
import org.apache.axis.types.URI.MalformedURIException;

import org.oasis.wsrf.properties.GetResourcePropertyResponse;

import org.globus.gsi.GlobusCredential;

import org.bioconductor.cagrid.statefulservices.SessionEndpoint;
import org.bioconductor.packages.caGeneFilter.stubs.CaGeneFilterServicePortType;
import org.bioconductor.packages.caGeneFilter.stubs.service.CaGeneFilterServiceAddressingLocator;
import org.bioconductor.packages.caGeneFilter.common.CaGeneFilterHelper;
import org.bioconductor.packages.caGeneFilter.common.CaGeneFilterServiceI;

import gov.nih.nci.cagrid.introduce.security.client.ServiceSecurityClient;

/**
 * This class is autogenerated, DO NOT EDIT GENERATED GRID SERVICE ACCESS METHODS.
 *
 * This client is generated automatically by Introduce to provide a clean unwrapped API to the
 * service.
 *
 * On construction the class instance will contact the remote service and retrieve it's security
 * metadata description which it will use to configure the Stub specifically for each method call.
 * 
 * @created by Introduce Toolkit version 1.2
 */
public class CaGeneFilterServiceClient extends CaGeneFilterServiceClientBase implements CaGeneFilterServiceI {	

	public CaGeneFilterServiceClient(String url) throws MalformedURIException, RemoteException {
		this(url,null);	
	}

	public CaGeneFilterServiceClient(String url, GlobusCredential proxy) throws MalformedURIException, RemoteException {
	   	super(url,proxy);
	}
	
	public CaGeneFilterServiceClient(EndpointReferenceType epr) throws MalformedURIException, RemoteException {
	   	this(epr,null);
	}
	
	public CaGeneFilterServiceClient(EndpointReferenceType epr, GlobusCredential proxy) throws MalformedURIException, RemoteException {
	   	super(epr,proxy);
	}

	public static void usage(){
		System.out.println(CaGeneFilterServiceClient.class.getName() + " -url <service url>");
	}
	
	public static void main(String [] args){
	    System.out.println("Running the Grid Service Client");
		try{
		if(!(args.length < 2)){
			if(args[0].equals("-url")){
			  CaGeneFilterServiceClient client = new CaGeneFilterServiceClient(args[1]);
			  // place client calls here if you want to use this main as a
			  // test....

			  java.io.FileInputStream fInStream = null;
			  java.io.ObjectInputStream objInStream = null;

			  try {
/*
				  // Read serialized data for testing.
					java.io.FileInputStream fis  = null;
					java.io.ObjectInputStream ois = null;
					org.bioconductor.packages.rservices.RJNumericMatrix rjNumericMatrix = null;
					try {

						String strDataFile = "./Data/numericMatrixSample.rda_java.Data.1233086703973";
						fis  = new java.io.FileInputStream(strDataFile);
						ois = new java.io.ObjectInputStream(fis);
						System.out.println("Deserialize data at: " + strDataFile + " to an object");
						Object deserRJNumericMatrix = ois.readObject();
						rjNumericMatrix = (org.bioconductor.packages.rservices.RJNumericMatrix)deserRJNumericMatrix;
					}
					catch(Exception ew) {
						System.out.println("Exception deseralizing object: " + ew.getMessage());
					}
					finally {
						fis.close();
						ois.close();
					}
					
			    	org.bioconductor.cagrid.data.SingleChannelExpressionDataCollection expressionData = 
			    		                       CaGeneFilterHelper.convertToSingleChannelExpressionDataCollection(rjNumericMatrix);
			    	
			    	// Testing KOverFilter Initialize the filter.
			        double minimumValue = 200.0d;
			        int minimumElementNumber = 5;
			        org.bioconductor.cagrid.cagenefilter.Filter filter = new org.bioconductor.cagrid.cagenefilter.KOverAFilter(minimumElementNumber, minimumValue);
			        org.bioconductor.cagrid.data.SingleChannelExpressionDataCollection returnCollection = client.filter(expressionData, filter);
			        if(returnCollection != null) {
			        	System.out.println("Got return result... with: ");
			        	System.out.println("reporter name size: " + returnCollection.getReporterNames().length);
			        	System.out.println("sample size: " + returnCollection.getExpressionDataCollection().length);
			        	System.out.println("A sample of sample value at index 1: ");
			        	double[] values = returnCollection.getExpressionDataCollection(1).getReporterValues().getValues();
			        	for(double value : values ) {
			        		System.out.print(value + " ");
			        	}
			        	
			        }
*/			        
			        
			        // Now testing with file transfer:
/*				  
			        String strBaseDir = "/home/mtra2/TestData/";
			        
					int size = 1;
					String[] strFileLocArr = new String[size];
					strFileLocArr[0] = strBaseDir + "CaArrayQualityMetrics/GPR/YeOv3.0_1_t24_vs_4_t24_5779.gpr";
					
					org.bioconductor.cagrid.rservices.FileReference[] fileRefArr =
						               new org.bioconductor.cagrid.rservices.FileReference[size];
					
					fileRefArr[0] = new org.bioconductor.cagrid.rservices.FileReference("YeOv3.0_1_t24_vs_4_t24_5779", "GPR", strFileLocArr[0]);
					
					org.bioconductor.cagrid.rservices.FileReferences fileReferences =
						                   new org.bioconductor.cagrid.rservices.FileReferences(fileRefArr);
					
					org.bioconductor.cagrid.statefulservices.SessionEndpoint caGeneFilterSessionEP = client.createFileRecodeSession();
					org.bioconductor.cagrid.data.ManufacturerFileReferences manFileRefs = 
						                              client.getUploadManufacturerFileReferences(caGeneFilterSessionEP, fileReferences);
					
					System.out.println("REturn: " + manFileRefs.getCagridFileReferenceCollection().length);
					System.out.println("REturn: " + manFileRefs.getCagridFileReferenceCollection()[0].getUrl());
					System.out.println("REturn: " + manFileRefs.getCagridFileReferenceCollection()[0].getLocalName());
					CaGeneFilterHelper.uploadFiles(manFileRefs);
					
					String colIdentifier = "Flags";
			        double colMinThresholdValue = -25.0d;
			        double recodeValue = Double.NEGATIVE_INFINITY;
			        org.bioconductor.cagrid.cagenefilter.SpotQualityRecode spotQRecode = 
			        	         new org.bioconductor.cagrid.cagenefilter.SpotQualityRecode(colIdentifier, colMinThresholdValue);
			        spotQRecode.setRecodeValue(recodeValue);
			        org.bioconductor.cagrid.data.TwoChannelExpressionDataCollection returnedTwoCollection = 
			        	                                        client.fileRecode(caGeneFilterSessionEP, spotQRecode);
					if(returnedTwoCollection != null) {
						System.out.println("Got return result... with: ");
						System.out.println("reporter name size: " + returnedTwoCollection.getReporterNames().length);
					}
*/
				  
				  SessionEndpoint sessionEP = client.createFileRecodeSession();
				  System.out.println("Successfully creating sessionEP.  Identifier: " + sessionEP.getIdentifier());
				  String strContext = org.bioconductor.packages.caGeneFilter.common.CaGeneFilterHelper.testLookupContext(args[1], sessionEP);
				  System.out.println("Returned: " + strContext);
			    }
			    catch(Exception ew) {
			    	System.out.println("Exception at client main: " + ew.getMessage());
			    	ew.printStackTrace();
			    }
			    finally {
			    	if(fInStream != null)
			    		fInStream.close();
			    	if(objInStream != null)
			    		objInStream.close();
			    }
			} else {
				usage();
				System.exit(1);
			}
		} else {
			usage();
			System.exit(1);
		}
		} catch (Exception e) {
			e.printStackTrace();
			System.exit(1);
		}
	}

  public java.lang.String getRpackageSessionInfo() throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"getRpackageSessionInfo");
    org.bioconductor.packages.caGeneFilter.stubs.GetRpackageSessionInfoRequest params = new org.bioconductor.packages.caGeneFilter.stubs.GetRpackageSessionInfoRequest();
    org.bioconductor.packages.caGeneFilter.stubs.GetRpackageSessionInfoResponse boxedResult = portType.getRpackageSessionInfo(params);
    return boxedResult.getResponse();
    }
  }

  public org.oasis.wsrf.properties.GetMultipleResourcePropertiesResponse getMultipleResourceProperties(org.oasis.wsrf.properties.GetMultipleResourceProperties_Element params) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"getMultipleResourceProperties");
    return portType.getMultipleResourceProperties(params);
    }
  }

  public org.oasis.wsrf.properties.GetResourcePropertyResponse getResourceProperty(javax.xml.namespace.QName params) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"getResourceProperty");
    return portType.getResourceProperty(params);
    }
  }

  public org.oasis.wsrf.properties.QueryResourcePropertiesResponse queryResourceProperties(org.oasis.wsrf.properties.QueryResourceProperties_Element params) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"queryResourceProperties");
    return portType.queryResourceProperties(params);
    }
  }

  public org.bioconductor.cagrid.data.SingleChannelExpressionDataCollection recode(org.bioconductor.cagrid.data.SingleChannelExpressionDataCollection dataCollection,org.bioconductor.cagrid.cagenefilter.Recode recode) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"recode");
    org.bioconductor.packages.caGeneFilter.stubs.RecodeRequest params = new org.bioconductor.packages.caGeneFilter.stubs.RecodeRequest();
    org.bioconductor.packages.caGeneFilter.stubs.RecodeRequestDataCollection dataCollectionContainer = new org.bioconductor.packages.caGeneFilter.stubs.RecodeRequestDataCollection();
    dataCollectionContainer.setSingleChannelExpressionDataCollection(dataCollection);
    params.setDataCollection(dataCollectionContainer);
    org.bioconductor.packages.caGeneFilter.stubs.RecodeRequestRecode recodeContainer = new org.bioconductor.packages.caGeneFilter.stubs.RecodeRequestRecode();
    recodeContainer.setRecode(recode);
    params.setRecode(recodeContainer);
    org.bioconductor.packages.caGeneFilter.stubs.RecodeResponse boxedResult = portType.recode(params);
    return boxedResult.getSingleChannelExpressionDataCollection();
    }
  }

  public org.bioconductor.cagrid.data.SingleChannelExpressionDataCollection filter(org.bioconductor.cagrid.data.SingleChannelExpressionDataCollection singleChannelExpressionDataCollection,org.bioconductor.cagrid.cagenefilter.Filter filter) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"filter");
    org.bioconductor.packages.caGeneFilter.stubs.FilterRequest params = new org.bioconductor.packages.caGeneFilter.stubs.FilterRequest();
    org.bioconductor.packages.caGeneFilter.stubs.FilterRequestSingleChannelExpressionDataCollection singleChannelExpressionDataCollectionContainer = new org.bioconductor.packages.caGeneFilter.stubs.FilterRequestSingleChannelExpressionDataCollection();
    singleChannelExpressionDataCollectionContainer.setSingleChannelExpressionDataCollection(singleChannelExpressionDataCollection);
    params.setSingleChannelExpressionDataCollection(singleChannelExpressionDataCollectionContainer);
    org.bioconductor.packages.caGeneFilter.stubs.FilterRequestFilter filterContainer = new org.bioconductor.packages.caGeneFilter.stubs.FilterRequestFilter();
    filterContainer.setFilter(filter);
    params.setFilter(filterContainer);
    org.bioconductor.packages.caGeneFilter.stubs.FilterResponse boxedResult = portType.filter(params);
    return boxedResult.getSingleChannelExpressionDataCollection();
    }
  }

  public org.bioconductor.cagrid.statefulservices.SessionEndpoint createFileRecodeSession() throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"createFileRecodeSession");
    org.bioconductor.packages.caGeneFilter.stubs.CreateFileRecodeSessionRequest params = new org.bioconductor.packages.caGeneFilter.stubs.CreateFileRecodeSessionRequest();
    org.bioconductor.packages.caGeneFilter.stubs.CreateFileRecodeSessionResponse boxedResult = portType.createFileRecodeSession(params);
    return boxedResult.getSessionEndpoint();
    }
  }

  public org.bioconductor.cagrid.data.ManufacturerFileReferences getUploadManufacturerFileReferences(org.bioconductor.cagrid.statefulservices.SessionEndpoint sessionEndpoint,org.bioconductor.cagrid.rservices.FileReferences fileReferences) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"getUploadManufacturerFileReferences");
    org.bioconductor.packages.caGeneFilter.stubs.GetUploadManufacturerFileReferencesRequest params = new org.bioconductor.packages.caGeneFilter.stubs.GetUploadManufacturerFileReferencesRequest();
    org.bioconductor.packages.caGeneFilter.stubs.GetUploadManufacturerFileReferencesRequestSessionEndpoint sessionEndpointContainer = new org.bioconductor.packages.caGeneFilter.stubs.GetUploadManufacturerFileReferencesRequestSessionEndpoint();
    sessionEndpointContainer.setSessionEndpoint(sessionEndpoint);
    params.setSessionEndpoint(sessionEndpointContainer);
    org.bioconductor.packages.caGeneFilter.stubs.GetUploadManufacturerFileReferencesRequestFileReferences fileReferencesContainer = new org.bioconductor.packages.caGeneFilter.stubs.GetUploadManufacturerFileReferencesRequestFileReferences();
    fileReferencesContainer.setFileReferences(fileReferences);
    params.setFileReferences(fileReferencesContainer);
    org.bioconductor.packages.caGeneFilter.stubs.GetUploadManufacturerFileReferencesResponse boxedResult = portType.getUploadManufacturerFileReferences(params);
    return boxedResult.getManufacturerFileReferences();
    }
  }

  public org.bioconductor.cagrid.data.TwoChannelExpressionDataCollection fileRecode(org.bioconductor.cagrid.statefulservices.SessionEndpoint sessionEndpoint,org.bioconductor.cagrid.cagenefilter.SpotQualityRecode spotQualityRecode) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"fileRecode");
    org.bioconductor.packages.caGeneFilter.stubs.FileRecodeRequest params = new org.bioconductor.packages.caGeneFilter.stubs.FileRecodeRequest();
    org.bioconductor.packages.caGeneFilter.stubs.FileRecodeRequestSessionEndpoint sessionEndpointContainer = new org.bioconductor.packages.caGeneFilter.stubs.FileRecodeRequestSessionEndpoint();
    sessionEndpointContainer.setSessionEndpoint(sessionEndpoint);
    params.setSessionEndpoint(sessionEndpointContainer);
    org.bioconductor.packages.caGeneFilter.stubs.FileRecodeRequestSpotQualityRecode spotQualityRecodeContainer = new org.bioconductor.packages.caGeneFilter.stubs.FileRecodeRequestSpotQualityRecode();
    spotQualityRecodeContainer.setSpotQualityRecode(spotQualityRecode);
    params.setSpotQualityRecode(spotQualityRecodeContainer);
    org.bioconductor.packages.caGeneFilter.stubs.FileRecodeResponse boxedResult = portType.fileRecode(params);
    return boxedResult.getTwoChannelExpressionDataCollection();
    }
  }

}
