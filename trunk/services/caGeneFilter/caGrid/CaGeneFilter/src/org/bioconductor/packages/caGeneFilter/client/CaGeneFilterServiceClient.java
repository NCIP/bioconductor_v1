package org.bioconductor.packages.caGeneFilter.client;

import java.io.InputStream;
import java.rmi.RemoteException;

import javax.xml.namespace.QName;

import org.apache.axis.EngineConfiguration;
import org.apache.axis.client.AxisClient;
import org.apache.axis.client.Stub;
import org.apache.axis.configuration.FileProvider;
import org.apache.axis.message.addressing.EndpointReferenceType;
import org.apache.axis.types.URI.MalformedURIException;

import org.oasis.wsrf.properties.GetResourcePropertyResponse;

import org.globus.gsi.GlobusCredential;

import org.bioconductor.cagrid.statefulservices.SessionEndpoint;
import org.bioconductor.packages.caGeneFilter.stubs.CaGeneFilterServicePortType;
import org.bioconductor.packages.caGeneFilter.stubs.service.CaGeneFilterServiceAddressingLocator;
import org.bioconductor.packages.caGeneFilter.common.CaGeneFilterHelper;
import org.bioconductor.packages.caGeneFilter.common.CaGeneFilterServiceI;

import gov.nih.nci.cagrid.introduce.security.client.ServiceSecurityClient;

/**
 * This class is autogenerated, DO NOT EDIT GENERATED GRID SERVICE ACCESS METHODS.
 *
 * This client is generated automatically by Introduce to provide a clean unwrapped API to the
 * service.
 *
 * On construction the class instance will contact the remote service and retrieve it's security
 * metadata description which it will use to configure the Stub specifically for each method call.
 * 
 * @created by Introduce Toolkit version 1.2
 */
public class CaGeneFilterServiceClient extends CaGeneFilterServiceClientBase implements CaGeneFilterServiceI {	

	public CaGeneFilterServiceClient(String url) throws MalformedURIException, RemoteException {
		this(url,null);	
	}

	public CaGeneFilterServiceClient(String url, GlobusCredential proxy) throws MalformedURIException, RemoteException {
	   	super(url,proxy);
	}
	
	public CaGeneFilterServiceClient(EndpointReferenceType epr) throws MalformedURIException, RemoteException {
	   	this(epr,null);
	}
	
	public CaGeneFilterServiceClient(EndpointReferenceType epr, GlobusCredential proxy) throws MalformedURIException, RemoteException {
	   	super(epr,proxy);
	}

	public static void usage(){
		System.out.println(CaGeneFilterServiceClient.class.getName() + " -url <service url>");
	}
	
	public static void main(String [] args){
	    System.out.println("Running the Grid Service Client");
		try{
		if(!(args.length < 2)){
			if(args[0].equals("-url")){
			  CaGeneFilterServiceClient client = new CaGeneFilterServiceClient(args[1]);
			  // place client calls here if you want to use this main as a
			  // test....
			  
			  org.bioconductor.cagrid.statefulservices.SessionIdentifier session = client.createCaGeneFilterSession();
			  System.out.println("session service url: " + session.getServiceUrl());
			  
			  java.io.FileInputStream fInStream = null;
			  java.io.ObjectInputStream objInStream = null;

			  try {
/*
				  // Read serialized data for testing.
					java.io.FileInputStream fis  = null;
					java.io.ObjectInputStream ois = null;
					org.bioconductor.packages.rservices.RJNumericMatrix rjNumericMatrix = null;
					try {

						String strDataFile = "./Data/numericMatrixSample.rda_java.Data.1233086703973";
						fis  = new java.io.FileInputStream(strDataFile);
						ois = new java.io.ObjectInputStream(fis);
						System.out.println("Deserialize data at: " + strDataFile + " to an object");
						Object deserRJNumericMatrix = ois.readObject();
						rjNumericMatrix = (org.bioconductor.packages.rservices.RJNumericMatrix)deserRJNumericMatrix;
					}
					catch(Exception ew) {
						System.out.println("Exception deseralizing object: " + ew.getMessage());
					}
					finally {
						fis.close();
						ois.close();
					}
					
			    	org.bioconductor.cagrid.data.SingleChannelExpressionDataCollection expressionData = 
			    		                       CaGeneFilterHelper.convertToSingleChannelExpressionDataCollection(rjNumericMatrix);
*/
				  	
//				    String testFilePath = "/home/mtra2/TestData/annotationFilterTestFile_mini-1.txt";
				  	String testFilePath = "/home/mtra2/TestData/affyHGU133A_annotationFilterTestFile_mini_4columns.txt";
				  
				  	java.io.File largeTestFile = new java.io.File(testFilePath);
				  	org.bioconductor.cagrid.data.SingleChannelExpressionDataCollection largeExpData = CaGeneFilterHelper.readTxt(largeTestFile);
				  	
				  	
				  	org.bioconductor.packages.helper.common.HelperService helperService = new org.bioconductor.packages.helper.common.HelperService();				  	
				  	helperService.uploadDataObject(session, largeExpData);
/*				  	
			    	// Testing KOverFilter Initialize the filter.
			        double minimumValue = 200.0d;
			        int minimumElementNumber = 5;
			        org.bioconductor.cagrid.cagenefilter.Filter filter = new org.bioconductor.cagrid.cagenefilter.KOverAFilter(minimumElementNumber, minimumValue);
//			        org.bioconductor.cagrid.data.SingleChannelExpressionDataCollection returnCollection = client.filter(largeExpData, filter);
			        // calling invokeFilter instead of filter to do filtering.  This invokeFilter returns nothing since expecting result is also large
			        // due to large input object
			        client.invokeFilter(session, filter);
			        // using HelperService to get result
			        Object returnedObj = helperService.getResultObject(args[1], session);
			        org.bioconductor.cagrid.data.SingleChannelExpressionDataCollection returnSingleChannelExpData = 
			        	(org.bioconductor.cagrid.data.SingleChannelExpressionDataCollection)returnedObj;
			        if(returnSingleChannelExpData != null) {
			        	System.out.println("Got return result... with: ");
			        	System.out.println("reporter name size: " + returnSingleChannelExpData.getReporterNames().length);
			        	System.out.println("sample size: " + returnSingleChannelExpData.getExpressionDataCollection().length);
			        	System.out.println("A sample of sample value at index 0: ");
			        	double[] values = returnSingleChannelExpData.getExpressionDataCollection(0).getReporterValues().getValues();
			        	for(double value : values ) {
			        		System.out.print(value + " ");
			        	}	
			        	
			        	System.out.println("samle name at index 1: " + returnSingleChannelExpData.getExpressionDataCollection(0).getSampleName());
			        }
*/
/*			        
			        // Testing with Variance filter
			        System.out.println("Testing with Variance filter:");
			        double minimumVariance = 100.0d;
					filter = new org.bioconductor.cagrid.cagenefilter.VarianceFilter(minimumVariance);
					client.invokeFilter(session, filter);
			        // using HelperService to get result
			        returnedObj = helperService.getResultObject(args[1], session);
			        returnSingleChannelExpData = (org.bioconductor.cagrid.data.SingleChannelExpressionDataCollection)returnedObj;
			        if(returnSingleChannelExpData != null) {
			        	System.out.println("Got return result... with: ");
			        	System.out.println("reporter name size: " + returnSingleChannelExpData.getReporterNames().length);
			        	System.out.println("sample size: " + returnSingleChannelExpData.getExpressionDataCollection().length);
			        	System.out.println("A sample of sample value at index 1: ");
			        	double[] values = returnSingleChannelExpData.getExpressionDataCollection(1).getReporterValues().getValues();
			        	for(double value : values ) {
			        		System.out.print(value + " ");
			        	}			        	
			        }
			        
			        
			        // Different file test for GO and Entrez
			        testFilePath = "/home/mtra2/TestData/affyData.txt";
				  	largeTestFile = new java.io.File(testFilePath);
				  	largeExpData = CaGeneFilterHelper.readTxt(largeTestFile);
				  	helperService.uploadDataObject(args[1], session, largeExpData);
			        
			        // Testing with GOFilter
			        System.out.println("Testing with GOFilter...");
			        String annotation = "hgu95av2";
			        boolean GOBP = true;
			        boolean GOCC = true;
			        boolean GOMF = true;
					filter = new org.bioconductor.cagrid.cagenefilter.GeneOntologyFilter(GOBP, GOCC, GOMF);
					((org.bioconductor.cagrid.cagenefilter.AnnotationFilter)filter).setAnnotation(annotation);
					client.invokeFilter(session, filter);
			        // using HelperService to get result
			        returnedObj = helperService.getResultObject(args[1], session);
			        returnSingleChannelExpData = (org.bioconductor.cagrid.data.SingleChannelExpressionDataCollection)returnedObj;
			        if(returnSingleChannelExpData != null) {
			        	System.out.println("Got return result... with: ");
			        	System.out.println("reporter name size: " + returnSingleChannelExpData.getReporterNames().length);
			        	System.out.println("sample size: " + returnSingleChannelExpData.getExpressionDataCollection().length);
			        	System.out.println("A sample of sample value at index 1: ");
			        	double[] values = returnSingleChannelExpData.getExpressionDataCollection(1).getReporterValues().getValues();
			        	for(double value : values ) {
			        		System.out.print(value + " ");
			        	}	
			        }
*/

/*
			        // Testing with EntrezFilter
			        // Initialize the filter.
			        System.out.println("Testing EntrezFilter");
			        String entresAnnotation = "hgu133a";

			        org.bioconductor.cagrid.cagenefilter.Filter filter = new org.bioconductor.cagrid.cagenefilter.EntrezFilter();
					((org.bioconductor.cagrid.cagenefilter.AnnotationFilter)filter).setAnnotation(entresAnnotation);
					client.invokeFilter(session, filter);
			        // using HelperService to get result
					Object returnedObj = helperService.getResultObject(session);
					org.bioconductor.cagrid.data.SingleChannelExpressionDataCollection returnSingleChannelExpData = 
												(org.bioconductor.cagrid.data.SingleChannelExpressionDataCollection)returnedObj;
			        if(returnSingleChannelExpData != null) {
			        	System.out.println("Got return result... with: ");
			        	System.out.println("reporter name size: " + returnSingleChannelExpData.getReporterNames().length);
			        	System.out.println("sample size: " + returnSingleChannelExpData.getExpressionDataCollection().length);
			        	System.out.println("A sample of sample value at index 1: ");
			        	double[] values = returnSingleChannelExpData.getExpressionDataCollection(1).getReporterValues().getValues();
			        	for(double value : values ) {
			        		System.out.print(value + " ");
			        	}	
			        }

*/			       
/*			        
			        // same SingleChannelExpressionDataCollection, try with the recode:
			        // Initialize the recode.
			        System.out.println("Testing Recode:");
			        double minimumThreshold            = -8000.0d;
			        double minimumThresholdRecodeValue = -8000.0d;

					org.bioconductor.cagrid.cagenefilter.Recode recode =
			                new org.bioconductor.cagrid.cagenefilter.MinimumThresholdRecode(minimumThreshold);
					recode.setRecodeValue(minimumThresholdRecodeValue);
					client.invokeRecode(session, recode);
					// using HelperService to get result
			        returnedObj = helperService.getResultObject(args[1], session);
			        returnSingleChannelExpData = 
			        	(org.bioconductor.cagrid.data.SingleChannelExpressionDataCollection)returnedObj;
			        if(returnSingleChannelExpData != null) {
			        	System.out.println("Got return result... with: ");
			        	System.out.println("reporter name size: " + returnSingleChannelExpData.getReporterNames().length);
			        	System.out.println("sample size: " + returnSingleChannelExpData.getExpressionDataCollection().length);
			        	System.out.println("A sample of sample value at index 1: ");
//			        	double[] values = returnSingleChannelExpData.getExpressionDataCollection(1).getReporterValues().getValues();
//			        	for(double value : values ) {
//			        		System.out.print(value + " ");
//			        	}
			        }
					
*/			        
			        
			        // Now testing with file transfer:
				  
			        String strBaseDir = "/home/mtra2/TestData/GPR/";
			        
					int size = 1;
					String[] strFileLocArr = new String[size];
					strFileLocArr[0] = strBaseDir + "YeAv3.1_D2_vs_WT2_1484_mini.gpr";
					
					org.bioconductor.cagrid.rservices.FileReference[] fileRefArr =
						               new org.bioconductor.cagrid.rservices.FileReference[size];
					
					fileRefArr[0] = new org.bioconductor.cagrid.rservices.FileReference("YeAv3.1_D2_vs_WT2_1484_mini", "GPR", strFileLocArr[0]);
					
					org.bioconductor.cagrid.rservices.FileReferenceCollection fileRefCollection =
						                   new org.bioconductor.cagrid.rservices.FileReferenceCollection(fileRefArr);
																				
					helperService.uploadFileReferenceCollection(session, fileRefCollection);
					
					String colIdentifier = "Flags";
			        double colMinThresholdValue = -25.0d;
			        double recodeValue = Double.NEGATIVE_INFINITY;
			        org.bioconductor.cagrid.cagenefilter.SpotQualityRecode spotQRecode = 
			        	         new org.bioconductor.cagrid.cagenefilter.SpotQualityRecode(colIdentifier, colMinThresholdValue);
			        spotQRecode.setRecodeValue(recodeValue);
			        client.invokeSpotQualityRecode(session, spotQRecode);
			        org.bioconductor.cagrid.data.TwoChannelExpressionDataCollection returnedTwoCollection = 
			        	(org.bioconductor.cagrid.data.TwoChannelExpressionDataCollection)helperService.getResultObject(session);
					if(returnedTwoCollection != null) {
						System.out.println("Got return result... with: ");
						System.out.println("reporter name size: " + returnedTwoCollection.getReporterNames().length);
					}

				  
				  
/*				  
				  SessionEndpoint sessionEP = client.createFileRecodeSession();
				  System.out.println("Successfully creating sessionEP.  Identifier: " + sessionEP.getIdentifier());
				  String strContext = org.bioconductor.packages.caGeneFilter.common.CaGeneFilterHelper.testLookupContext(args[1], sessionEP);
				  System.out.println("Returned: " + strContext);
*/
			    }
			    catch(Exception ew) {
			    	System.out.println("Exception at client main: " + ew.getMessage());
			    	ew.printStackTrace();
			    }
			    finally {
			    	if(fInStream != null)
			    		fInStream.close();
			    	if(objInStream != null)
			    		objInStream.close();
			    }
			} else {
				usage();
				System.exit(1);
			}
		} else {
			usage();
			System.exit(1);
		}
		} catch (Exception e) {
			e.printStackTrace();
			System.exit(1);
		}
	}
	
	

  public org.oasis.wsrf.properties.GetMultipleResourcePropertiesResponse getMultipleResourceProperties(org.oasis.wsrf.properties.GetMultipleResourceProperties_Element params) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"getMultipleResourceProperties");
    return portType.getMultipleResourceProperties(params);
    }
  }

  public org.oasis.wsrf.properties.GetResourcePropertyResponse getResourceProperty(javax.xml.namespace.QName params) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"getResourceProperty");
    return portType.getResourceProperty(params);
    }
  }

  public org.oasis.wsrf.properties.QueryResourcePropertiesResponse queryResourceProperties(org.oasis.wsrf.properties.QueryResourceProperties_Element params) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"queryResourceProperties");
    return portType.queryResourceProperties(params);
    }
  }

  public org.bioconductor.cagrid.data.SingleChannelExpressionDataCollection recode(org.bioconductor.cagrid.data.SingleChannelExpressionDataCollection dataCollection,org.bioconductor.cagrid.cagenefilter.Recode recode) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"recode");
    org.bioconductor.packages.caGeneFilter.stubs.RecodeRequest params = new org.bioconductor.packages.caGeneFilter.stubs.RecodeRequest();
    org.bioconductor.packages.caGeneFilter.stubs.RecodeRequestDataCollection dataCollectionContainer = new org.bioconductor.packages.caGeneFilter.stubs.RecodeRequestDataCollection();
    dataCollectionContainer.setSingleChannelExpressionDataCollection(dataCollection);
    params.setDataCollection(dataCollectionContainer);
    org.bioconductor.packages.caGeneFilter.stubs.RecodeRequestRecode recodeContainer = new org.bioconductor.packages.caGeneFilter.stubs.RecodeRequestRecode();
    recodeContainer.setRecode(recode);
    params.setRecode(recodeContainer);
    org.bioconductor.packages.caGeneFilter.stubs.RecodeResponse boxedResult = portType.recode(params);
    return boxedResult.getSingleChannelExpressionDataCollection();
    }
  }

  public org.bioconductor.cagrid.data.SingleChannelExpressionDataCollection filter(org.bioconductor.cagrid.data.SingleChannelExpressionDataCollection singleChannelExpressionDataCollection,org.bioconductor.cagrid.cagenefilter.Filter filter) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"filter");
    org.bioconductor.packages.caGeneFilter.stubs.FilterRequest params = new org.bioconductor.packages.caGeneFilter.stubs.FilterRequest();
    org.bioconductor.packages.caGeneFilter.stubs.FilterRequestSingleChannelExpressionDataCollection singleChannelExpressionDataCollectionContainer = new org.bioconductor.packages.caGeneFilter.stubs.FilterRequestSingleChannelExpressionDataCollection();
    singleChannelExpressionDataCollectionContainer.setSingleChannelExpressionDataCollection(singleChannelExpressionDataCollection);
    params.setSingleChannelExpressionDataCollection(singleChannelExpressionDataCollectionContainer);
    org.bioconductor.packages.caGeneFilter.stubs.FilterRequestFilter filterContainer = new org.bioconductor.packages.caGeneFilter.stubs.FilterRequestFilter();
    filterContainer.setFilter(filter);
    params.setFilter(filterContainer);
    org.bioconductor.packages.caGeneFilter.stubs.FilterResponse boxedResult = portType.filter(params);
    return boxedResult.getSingleChannelExpressionDataCollection();
    }
  }

  public void invokeSpotQualityRecode(org.bioconductor.cagrid.statefulservices.SessionIdentifier sessionIdentifier,org.bioconductor.cagrid.cagenefilter.SpotQualityRecode spotQualityRecode) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"invokeSpotQualityRecode");
    org.bioconductor.packages.caGeneFilter.stubs.InvokeSpotQualityRecodeRequest params = new org.bioconductor.packages.caGeneFilter.stubs.InvokeSpotQualityRecodeRequest();
    org.bioconductor.packages.caGeneFilter.stubs.InvokeSpotQualityRecodeRequestSessionIdentifier sessionIdentifierContainer = new org.bioconductor.packages.caGeneFilter.stubs.InvokeSpotQualityRecodeRequestSessionIdentifier();
    sessionIdentifierContainer.setSessionIdentifier(sessionIdentifier);
    params.setSessionIdentifier(sessionIdentifierContainer);
    org.bioconductor.packages.caGeneFilter.stubs.InvokeSpotQualityRecodeRequestSpotQualityRecode spotQualityRecodeContainer = new org.bioconductor.packages.caGeneFilter.stubs.InvokeSpotQualityRecodeRequestSpotQualityRecode();
    spotQualityRecodeContainer.setSpotQualityRecode(spotQualityRecode);
    params.setSpotQualityRecode(spotQualityRecodeContainer);
    org.bioconductor.packages.caGeneFilter.stubs.InvokeSpotQualityRecodeResponse boxedResult = portType.invokeSpotQualityRecode(params);
    }
  }

  public java.lang.String getRpackageSessionInfo() throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"getRpackageSessionInfo");
    org.bioconductor.packages.caGeneFilter.stubs.GetRpackageSessionInfoRequest params = new org.bioconductor.packages.caGeneFilter.stubs.GetRpackageSessionInfoRequest();
    org.bioconductor.packages.caGeneFilter.stubs.GetRpackageSessionInfoResponse boxedResult = portType.getRpackageSessionInfo(params);
    return boxedResult.getResponse();
    }
  }

  public void invokeFilter(org.bioconductor.cagrid.statefulservices.SessionIdentifier sessionIdentifier,org.bioconductor.cagrid.cagenefilter.Filter filter) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"invokeFilter");
    org.bioconductor.packages.caGeneFilter.stubs.InvokeFilterRequest params = new org.bioconductor.packages.caGeneFilter.stubs.InvokeFilterRequest();
    org.bioconductor.packages.caGeneFilter.stubs.InvokeFilterRequestSessionIdentifier sessionIdentifierContainer = new org.bioconductor.packages.caGeneFilter.stubs.InvokeFilterRequestSessionIdentifier();
    sessionIdentifierContainer.setSessionIdentifier(sessionIdentifier);
    params.setSessionIdentifier(sessionIdentifierContainer);
    org.bioconductor.packages.caGeneFilter.stubs.InvokeFilterRequestFilter filterContainer = new org.bioconductor.packages.caGeneFilter.stubs.InvokeFilterRequestFilter();
    filterContainer.setFilter(filter);
    params.setFilter(filterContainer);
    org.bioconductor.packages.caGeneFilter.stubs.InvokeFilterResponse boxedResult = portType.invokeFilter(params);
    }
  }

  public void invokeRecode(org.bioconductor.cagrid.statefulservices.SessionIdentifier sessionIdentifier,org.bioconductor.cagrid.cagenefilter.Recode recode) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"invokeRecode");
    org.bioconductor.packages.caGeneFilter.stubs.InvokeRecodeRequest params = new org.bioconductor.packages.caGeneFilter.stubs.InvokeRecodeRequest();
    org.bioconductor.packages.caGeneFilter.stubs.InvokeRecodeRequestSessionIdentifier sessionIdentifierContainer = new org.bioconductor.packages.caGeneFilter.stubs.InvokeRecodeRequestSessionIdentifier();
    sessionIdentifierContainer.setSessionIdentifier(sessionIdentifier);
    params.setSessionIdentifier(sessionIdentifierContainer);
    org.bioconductor.packages.caGeneFilter.stubs.InvokeRecodeRequestRecode recodeContainer = new org.bioconductor.packages.caGeneFilter.stubs.InvokeRecodeRequestRecode();
    recodeContainer.setRecode(recode);
    params.setRecode(recodeContainer);
    org.bioconductor.packages.caGeneFilter.stubs.InvokeRecodeResponse boxedResult = portType.invokeRecode(params);
    }
  }

  public org.bioconductor.cagrid.statefulservices.SessionIdentifier createCaGeneFilterSession() throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"createCaGeneFilterSession");
    org.bioconductor.packages.caGeneFilter.stubs.CreateCaGeneFilterSessionRequest params = new org.bioconductor.packages.caGeneFilter.stubs.CreateCaGeneFilterSessionRequest();
    org.bioconductor.packages.caGeneFilter.stubs.CreateCaGeneFilterSessionResponse boxedResult = portType.createCaGeneFilterSession(params);
    return boxedResult.getSessionIdentifier();
    }
  }

  public org.bioconductor.cagrid.statefulservices.Status getStatus(org.bioconductor.cagrid.statefulservices.SessionIdentifier sessionIdentifier) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"getStatus");
    org.bioconductor.packages.caGeneFilter.stubs.GetStatusRequest params = new org.bioconductor.packages.caGeneFilter.stubs.GetStatusRequest();
    org.bioconductor.packages.caGeneFilter.stubs.GetStatusRequestSessionIdentifier sessionIdentifierContainer = new org.bioconductor.packages.caGeneFilter.stubs.GetStatusRequestSessionIdentifier();
    sessionIdentifierContainer.setSessionIdentifier(sessionIdentifier);
    params.setSessionIdentifier(sessionIdentifierContainer);
    org.bioconductor.packages.caGeneFilter.stubs.GetStatusResponse boxedResult = portType.getStatus(params);
    return boxedResult.getStatus();
    }
  }

}
