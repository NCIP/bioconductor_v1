package org.bioconductor.packages.caArrayQualityMetrics.client;

import java.io.InputStream;
import java.rmi.RemoteException;

import javax.xml.namespace.QName;

import org.apache.axis.EngineConfiguration;
import org.apache.axis.client.AxisClient;
import org.apache.axis.client.Stub;
import org.apache.axis.configuration.FileProvider;
import org.apache.axis.message.addressing.EndpointReferenceType;
import org.apache.axis.types.URI.MalformedURIException;

import org.oasis.wsrf.properties.GetResourcePropertyResponse;

import org.globus.gsi.GlobusCredential;

import org.bioconductor.packages.caArrayQualityMetrics.stubs.CaArrayQualityMetricsPortType;
import org.bioconductor.packages.caArrayQualityMetrics.stubs.service.CaArrayQualityMetricsServiceAddressingLocator;
import org.bioconductor.packages.caArrayQualityMetrics.common.CaArrayQualityMetricsI;
import org.bioconductor.packages.caArrayQualityMetrics.common.CaAQMOperationsHelper;

import gov.nih.nci.cagrid.introduce.security.client.ServiceSecurityClient;

/**
 * This class is autogenerated, DO NOT EDIT GENERATED GRID SERVICE ACCESS METHODS.
 *
 * This client is generated automatically by Introduce to provide a clean unwrapped API to the
 * service.
 *
 * On construction the class instance will contact the remote service and retrieve it's security
 * metadata description which it will use to configure the Stub specifically for each method call.
 * 
 * @created by Introduce Toolkit version 1.2
 */
public class CaArrayQualityMetricsClient extends CaArrayQualityMetricsClientBase implements CaArrayQualityMetricsI {	

	public CaArrayQualityMetricsClient(String url) throws MalformedURIException, RemoteException {
		this(url,null);	
	}

	public CaArrayQualityMetricsClient(String url, GlobusCredential proxy) throws MalformedURIException, RemoteException {
	   	super(url,proxy);
	}
	
	public CaArrayQualityMetricsClient(EndpointReferenceType epr) throws MalformedURIException, RemoteException {
	   	this(epr,null);
	}
	
	public CaArrayQualityMetricsClient(EndpointReferenceType epr, GlobusCredential proxy) throws MalformedURIException, RemoteException {
	   	super(epr,proxy);
	}

	public static void usage(){
		System.out.println(CaArrayQualityMetricsClient.class.getName() + " -url <service url>");
	}
	
	public static void main(String [] args){
	    System.out.println("Running the Grid Service Client");
		try{
		if(!(args.length < 2)){
			if(args[0].equals("-url")){
				CaArrayQualityMetricsClient client = new CaArrayQualityMetricsClient(args[1]);
				
				System.out.println("Calling get report session...");
				org.bioconductor.cagrid.statefulservices.SessionIdentifier sessionIden = client.createQualityReportSession();
				
				System.out.println("Session identifier key: " + sessionIden.getIdentifier());
				System.out.println("Session service url: " + sessionIden.getServiceUrl());
				
//				String sessionInfo = client.getRpackageSessionInfo();
//				System.out.println("Session info: " + sessionInfo);
				
				// place client calls here if you want to use this main as a
				// test....
//			  	final org.bioconductor.cagrid.statefulservices.SessionEndpoint caAQM_SessionEP = client.createReportSession();
			  	
//			  	System.out.println("SessionEnpoint key: " + caAQM_SessionEP.getIdentifier());

			  	
			  	String strBaseDir = "/home/mtra2/TestData/";  
				
				 int size = 2;
				 
				 String[] strFileLocArr = new String[size];

//				 strFileLocArr[0] = strBaseDir + "0034_1f.CEL";
//				 strFileLocArr[1] = strBaseDir + "0034_2f.CEL";
//				 strFileLocArr[2] = strBaseDir + "0034_3f.CEL";
	
				 
				 strFileLocArr[0] = strBaseDir + "GPR/251316214319_auto_479-628.gpr";
				 strFileLocArr[1] = strBaseDir + "GPR/251316214320_auto_478-629.gpr";
//				 strFileLocArr[2] = strBaseDir + "GPR/251316214321_auto_410-592.gpr";
			 
				 
				 org.bioconductor.cagrid.rservices.FileReference[] fileRefArr = new org.bioconductor.cagrid.rservices.FileReference[size];
/*
				  fileRefArr[0] = new org.bioconductor.cagrid.rservices.FileReference(strFileLocArr[0], "0034_1f", "CEL");
				  fileRefArr[1] = new org.bioconductor.cagrid.rservices.FileReference(strFileLocArr[1], "0034_2f", "CEL");
				  fileRefArr[2] = new org.bioconductor.cagrid.rservices.FileReference(strFileLocArr[2], "0034_3f", "CEL");
*/
				  
				  fileRefArr[0] = new org.bioconductor.cagrid.rservices.FileReference();
				  fileRefArr[0].setLocalName("251316214319_auto_479-628");
				  fileRefArr[0].setType("GPR");
				  fileRefArr[0].setUrl(strFileLocArr[0]);
				  
				  fileRefArr[1] = new org.bioconductor.cagrid.rservices.FileReference();
				  fileRefArr[1].setLocalName("251316214320_auto_478-629");
				  fileRefArr[1].setType("GPR");
				  fileRefArr[1].setUrl(strFileLocArr[1]);
				  
//				  fileRefArr[2] = new org.bioconductor.cagrid.rservices.FileReference(strFileLocArr[2], "251316214321_auto_410-592", "GPR");
				  
				  
				  org.bioconductor.cagrid.rservices.FileReferenceCollection fileRefCollection = new org.bioconductor.cagrid.rservices.FileReferenceCollection(fileRefArr);
				  				  				  
//				  org.bioconductor.cagrid.data.QualityReportFileReferences reportFileRefs = client.getUploadQualityReportFileReferences(caAQM_SessionEP, fileReferences);
				  
//				  System.out.println("Start uploading files for caArrayQualityMetrics...");
//				  CaAQMOperationsHelper.uploadFiles(reportFileRefs);

			  	
				// create a helper for invoking:
				org.bioconductor.packages.helper.common.HelperService helperService = new org.bioconductor.packages.helper.common.HelperService();
			    // now, use helper invoker to upload files:				  
				org.bioconductor.cagrid.statefulservices.Status status =  helperService.uploadFileReferenceCollection(sessionIden, fileRefCollection);
										  
				status = client.runCaArrayQualityMetrics(sessionIden);
				// next is just a loop to check when caFlowQ finishes its job and service successully receive a result from caFlowQ
				// Note if this loop doesn't break, that means something going bad at the service
				System.out.println("Status: " + status.getState().toString());
				while(!(status.getState().equals(org.bioconductor.cagrid.statefulservices.StatusState.RESULT_AVAILABLE))) {
					 System.out.println("Status now is: " + status.getState());
					 System.out.println("Result is not ready... Sleep for 6 seconds");
					 try {
						Thread.sleep(6000);
						status = client.getStatus(sessionIden);
					 }
					 catch(Exception ew){}
				 }

				System.out.println("Result is ready");
				// calling the service to get the result
//				org.bioconductor.cagrid.caarrayqualitymetrics.QualityReportFileReferenceCollection qualityResultFileRefs = 
//								(org.bioconductor.cagrid.caarrayqualitymetrics.QualityReportFileReferenceCollection)helperService.getFileReferenceCollection(sessionIden);
				org.bioconductor.cagrid.rservices.FileReferenceCollection qualityResultFileRefs = helperService.getFileReferenceCollection(sessionIden);
				System.out.println("Result file type: " + qualityResultFileRefs.toString());
					             
				System.out.println("Got the report result");
				// the result is CaFlowQUrl containing url where to get the report.
				// call helper invoker to get it:
//				org.bioconductor.cagrid.rservices.FileReference[] resultFileRefArr = (org.bioconductor.cagrid.rservices.FileReference[])qualityResultFileRefs.getFileReferenceCollection();
//				org.bioconductor.cagrid.rservices.FileReferenceCollection reportFileRefs = helperService.dowloadResultFiles(
//						                        new org.bioconductor.cagrid.rservices.FileReferenceCollection(resultFileRefArr), "/home/mtra2/JunkTest");
				org.bioconductor.cagrid.rservices.FileReferenceCollection reportFileRefs = helperService.dowloadResultFiles(qualityResultFileRefs, "/home/mtra2/JunkTest");				                                                                         

			  
			  String reportFileLoc = reportFileRefs.getFileReferenceCollection()[0].getUrl();
			  System.out.println("display report for: " + reportFileLoc);
			  
			  CaAQMOperationsHelper.displayReport(reportFileLoc, "QMreport.html");
				  
			} else {
				usage();
				System.exit(1);
			}
		} else {
			usage();
			System.exit(1);
		}
		} catch (Exception e) {
			e.printStackTrace();
			System.exit(1);
		}
	}

  

  public org.oasis.wsrf.properties.GetMultipleResourcePropertiesResponse getMultipleResourceProperties(org.oasis.wsrf.properties.GetMultipleResourceProperties_Element params) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"getMultipleResourceProperties");
    return portType.getMultipleResourceProperties(params);
    }
  }

  public org.oasis.wsrf.properties.GetResourcePropertyResponse getResourceProperty(javax.xml.namespace.QName params) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"getResourceProperty");
    return portType.getResourceProperty(params);
    }
  }

  public org.oasis.wsrf.properties.QueryResourcePropertiesResponse queryResourceProperties(org.oasis.wsrf.properties.QueryResourceProperties_Element params) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"queryResourceProperties");
    return portType.queryResourceProperties(params);
    }
  }

  public org.bioconductor.cagrid.statefulservices.Status runCaArrayQualityMetrics(org.bioconductor.cagrid.statefulservices.SessionIdentifier sessionIdentifier) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"runCaArrayQualityMetrics");
    org.bioconductor.packages.caArrayQualityMetrics.stubs.RunCaArrayQualityMetricsRequest params = new org.bioconductor.packages.caArrayQualityMetrics.stubs.RunCaArrayQualityMetricsRequest();
    org.bioconductor.packages.caArrayQualityMetrics.stubs.RunCaArrayQualityMetricsRequestSessionIdentifier sessionIdentifierContainer = new org.bioconductor.packages.caArrayQualityMetrics.stubs.RunCaArrayQualityMetricsRequestSessionIdentifier();
    sessionIdentifierContainer.setSessionIdentifier(sessionIdentifier);
    params.setSessionIdentifier(sessionIdentifierContainer);
    org.bioconductor.packages.caArrayQualityMetrics.stubs.RunCaArrayQualityMetricsResponse boxedResult = portType.runCaArrayQualityMetrics(params);
    return boxedResult.getStatus();
    }
  }

  public java.lang.String getRpackageSessionInfo() throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"getRpackageSessionInfo");
    org.bioconductor.packages.caArrayQualityMetrics.stubs.GetRpackageSessionInfoRequest params = new org.bioconductor.packages.caArrayQualityMetrics.stubs.GetRpackageSessionInfoRequest();
    org.bioconductor.packages.caArrayQualityMetrics.stubs.GetRpackageSessionInfoResponse boxedResult = portType.getRpackageSessionInfo(params);
    return boxedResult.getResponse();
    }
  }

  public org.bioconductor.cagrid.statefulservices.Status getStatus(org.bioconductor.cagrid.statefulservices.SessionIdentifier sessionIdentifier) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"getStatus");
    org.bioconductor.packages.caArrayQualityMetrics.stubs.GetStatusRequest params = new org.bioconductor.packages.caArrayQualityMetrics.stubs.GetStatusRequest();
    org.bioconductor.packages.caArrayQualityMetrics.stubs.GetStatusRequestSessionIdentifier sessionIdentifierContainer = new org.bioconductor.packages.caArrayQualityMetrics.stubs.GetStatusRequestSessionIdentifier();
    sessionIdentifierContainer.setSessionIdentifier(sessionIdentifier);
    params.setSessionIdentifier(sessionIdentifierContainer);
    org.bioconductor.packages.caArrayQualityMetrics.stubs.GetStatusResponse boxedResult = portType.getStatus(params);
    return boxedResult.getStatus();
    }
  }

  public org.bioconductor.cagrid.statefulservices.SessionIdentifier createQualityReportSession() throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"createQualityReportSession");
    org.bioconductor.packages.caArrayQualityMetrics.stubs.CreateQualityReportSessionRequest params = new org.bioconductor.packages.caArrayQualityMetrics.stubs.CreateQualityReportSessionRequest();
    org.bioconductor.packages.caArrayQualityMetrics.stubs.CreateQualityReportSessionResponse boxedResult = portType.createQualityReportSession(params);
    return boxedResult.getSessionIdentifier();
    }
  }

}
