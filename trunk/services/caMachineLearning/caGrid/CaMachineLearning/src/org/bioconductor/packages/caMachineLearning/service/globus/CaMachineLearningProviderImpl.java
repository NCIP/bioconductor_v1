package org.bioconductor.packages.caMachineLearning.service.globus;

import org.bioconductor.packages.caMachineLearning.service.CaMachineLearningImpl;

import java.rmi.RemoteException;

/** 
 * DO NOT EDIT:  This class is autogenerated!
 *
 * This class implements each method in the portType of the service.  Each method call represented
 * in the port type will be then mapped into the unwrapped implementation which the user provides
 * in the CaMachineLearningImpl class.  This class handles the boxing and unboxing of each method call
 * so that it can be correclty mapped in the unboxed interface that the developer has designed and 
 * has implemented.  Authorization callbacks are automatically made for each method based
 * on each methods authorization requirements.
 * 
 * @created by Introduce Toolkit version 1.2
 * 
 */
public class CaMachineLearningProviderImpl{
	
	CaMachineLearningImpl impl;
	
	public CaMachineLearningProviderImpl() throws RemoteException {
		impl = new CaMachineLearningImpl();
	}
	

    public org.bioconductor.packages.caMachineLearning.stubs.LearnResponse learn(org.bioconductor.packages.caMachineLearning.stubs.LearnRequest params) throws RemoteException {
    org.bioconductor.packages.caMachineLearning.stubs.LearnResponse boxedResult = new org.bioconductor.packages.caMachineLearning.stubs.LearnResponse();
    boxedResult.setMachineLearningResultCollection(impl.learn(params.getSingleChannelExpressionDataCollection().getSingleChannelExpressionDataCollection(),params.getCagridMachineLearningParameters().getMachineLearningParameters()));
    return boxedResult;
  }

    public org.bioconductor.packages.caMachineLearning.stubs.CreateCaMachineLearningSessionResponse createCaMachineLearningSession(org.bioconductor.packages.caMachineLearning.stubs.CreateCaMachineLearningSessionRequest params) throws RemoteException {
    org.bioconductor.packages.caMachineLearning.stubs.CreateCaMachineLearningSessionResponse boxedResult = new org.bioconductor.packages.caMachineLearning.stubs.CreateCaMachineLearningSessionResponse();
    boxedResult.setSessionIdentifier(impl.createCaMachineLearningSession());
    return boxedResult;
  }

    public org.bioconductor.packages.caMachineLearning.stubs.InvokeLearnResponse invokeLearn(org.bioconductor.packages.caMachineLearning.stubs.InvokeLearnRequest params) throws RemoteException {
    org.bioconductor.packages.caMachineLearning.stubs.InvokeLearnResponse boxedResult = new org.bioconductor.packages.caMachineLearning.stubs.InvokeLearnResponse();
    impl.invokeLearn(params.getSessionIdentifier().getSessionIdentifier(),params.getCagridMachineLearningParameters().getMachineLearningParameters());
    return boxedResult;
  }

    public org.bioconductor.packages.caMachineLearning.stubs.GetStatusResponse getStatus(org.bioconductor.packages.caMachineLearning.stubs.GetStatusRequest params) throws RemoteException {
    org.bioconductor.packages.caMachineLearning.stubs.GetStatusResponse boxedResult = new org.bioconductor.packages.caMachineLearning.stubs.GetStatusResponse();
    boxedResult.setStatus(impl.getStatus(params.getSessionIdentifier().getSessionIdentifier()));
    return boxedResult;
  }

    public org.bioconductor.packages.caMachineLearning.stubs.GetRpackageSessionInfoResponse getRpackageSessionInfo(org.bioconductor.packages.caMachineLearning.stubs.GetRpackageSessionInfoRequest params) throws RemoteException {
    org.bioconductor.packages.caMachineLearning.stubs.GetRpackageSessionInfoResponse boxedResult = new org.bioconductor.packages.caMachineLearning.stubs.GetRpackageSessionInfoResponse();
    boxedResult.setResponse(impl.getRpackageSessionInfo());
    return boxedResult;
  }

}
