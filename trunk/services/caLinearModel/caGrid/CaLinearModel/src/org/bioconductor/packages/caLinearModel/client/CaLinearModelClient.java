package org.bioconductor.packages.caLinearModel.client;

import java.io.InputStream;
import java.rmi.RemoteException;

import javax.xml.namespace.QName;

import org.apache.axis.EngineConfiguration;
import org.apache.axis.client.AxisClient;
import org.apache.axis.client.Stub;
import org.apache.axis.configuration.FileProvider;
import org.apache.axis.message.addressing.EndpointReferenceType;
import org.apache.axis.types.URI.MalformedURIException;

import org.oasis.wsrf.properties.GetResourcePropertyResponse;

import org.globus.gsi.GlobusCredential;

import org.bioconductor.packages.caLinearModel.stubs.CaLinearModelPortType;
import org.bioconductor.packages.caLinearModel.stubs.service.CaLinearModelServiceAddressingLocator;
import org.bioconductor.packages.caLinearModel.common.CaLinearModelI;
import gov.nih.nci.cagrid.introduce.security.client.ServiceSecurityClient;

import org.bioconductor.packages.caLinearModel.common.CaLinearModelHelper;

import org.bioconductor.cagrid.data.ExpressionData;
import org.bioconductor.cagrid.data.*;
import org.bioconductor.cagrid.calinearmodel.*;
import gov.nih.nci.caarray.domain.data.DoubleColumn;
import gov.nih.nci.caarray.domain.project.FactorValue;

import java.io.*;
import java.util.*;

/**
 * This class is autogenerated, DO NOT EDIT GENERATED GRID SERVICE ACCESS METHODS.
 *
 * This client is generated automatically by Introduce to provide a clean unwrapped API to the
 * service.
 *
 * On construction the class instance will contact the remote service and retrieve it's security
 * metadata description which it will use to configure the Stub specifically for each method call.
 * 
 * @created by Introduce Toolkit version 1.2
 */
public class CaLinearModelClient extends CaLinearModelClientBase implements CaLinearModelI {	

	public CaLinearModelClient(String url) throws MalformedURIException, RemoteException {
		this(url,null);	
	}

	public CaLinearModelClient(String url, GlobusCredential proxy) throws MalformedURIException, RemoteException {
	   	super(url,proxy);
	}
	
	public CaLinearModelClient(EndpointReferenceType epr) throws MalformedURIException, RemoteException {
	   	this(epr,null);
	}
	
	public CaLinearModelClient(EndpointReferenceType epr, GlobusCredential proxy) throws MalformedURIException, RemoteException {
	   	super(epr,proxy);
	}

	public static void usage(){
		System.out.println(CaLinearModelClient.class.getName() + " -url <service url>");
	}
	
	public static void main(String [] args){
	    System.out.println("Running the Grid Service Client");
		try{
		if(!(args.length < 2)){
			if(args[0].equals("-url")){
			  CaLinearModelClient client = new CaLinearModelClient(args[1]);
			  // place client calls here if you want to use this main as a
			  // test....
			  
			  
			  File testFile = new File("/home/mtra2/TestData/caLinearModelTestFile_mini.txt");
			  SingleChannelExpressionDataCollection expressionData = client.readTxt(testFile);
			  
			  // TTest:
			  TTest ttest = new TTest();
			  ttest.setNumberOfTopReporters(4);
			  TTestAnnotation ttestAnno[] = new TTestAnnotation[6];
			  for (int i = 0; i < ttestAnno.length; i++) {
				  ttestAnno[i] = new TTestAnnotation();
				  if (i < 3) ttestAnno[i].setFactorLevel(new FactorValue(null, null, "High"));
				  else ttestAnno[i].setFactorLevel(new FactorValue(null, null, "Low"));
				  ttestAnno[i].setSampleIdentifier("CMHI." + (i+1));
			  }
			  ttest.setTTestAnnotation(ttestAnno);
			  
			  TopTableCollection retTopTableColl = client.fit(expressionData, ttest);
			  client.displayTopTableCollection(retTopTableColl);
			  // Done TTest
			    
/*			   
			  
			  // PairedTTest:
			  PairedTTest pttest = new PairedTTest();
			  pttest.setNumberOfTopReporters(4);
			  PairedTTestAnnotation pttestAnno[] = new PairedTTestAnnotation[6];
			  String[] pair = new String[] { "One", "Two", "Three" };
			  for (int i = 0; i < pttestAnno.length; i++) {
				  pttestAnno[i] = new PairedTTestAnnotation();
				  if (i < 3) pttestAnno[i].setFactorLevel(new FactorValue(null, null, "High"));
				  else pttestAnno[i].setFactorLevel(new FactorValue(null, null, "Low"));
				  pttestAnno[i].setPairIdentifier(pair[i % 3]);
				  pttestAnno[i].setSampleIdentifier("CMHI." + (i+1));
			  }
			  pttest.setPairedTTestAnnotation(pttestAnno);
			  
			  TopTableCollection pRetTopTableColl = client.fit(expressionData, pttest);
			  client.displayTopTableCollection(pRetTopTableColl);
			  // Done PairedTTest:
			  
			  // OneFactorANOVA
			  OneFactorANOVA oneFactorANOVA = new OneFactorANOVA();
			  oneFactorANOVA.setNumberOfTopReporters(4);
			  OneFactorANOVAAnnotation oneFactorANOVAAnno[] = new OneFactorANOVAAnnotation[6];
			  for (int i = 0; i < oneFactorANOVAAnno.length; i++) {
				  oneFactorANOVAAnno[i] = new OneFactorANOVAAnnotation();
				  if (i < 2) oneFactorANOVAAnno[i].setFactorLevel(new FactorValue(null, null, "High"));
				  else if (i < 4) oneFactorANOVAAnno[i].setFactorLevel(new FactorValue(null, null, "Medium"));
				  else oneFactorANOVAAnno[i].setFactorLevel(new FactorValue(null, null, "Low"));
				  oneFactorANOVAAnno[i].setSampleIdentifier("CMHI." + (i+1));
			  }
			  oneFactorANOVA.setOneFactorANOVAAnnotation(oneFactorANOVAAnno);
			  
			  
			  TopTableCollection oneFactorANOVARetTopTableColl = client.fit(expressionData, oneFactorANOVA);
			  // display
			  client.displayTopTableCollection(oneFactorANOVARetTopTableColl);
			  
			  // TwoFactorANOVA	  
			  TwoFactorANOVA twoFactorANOVA = new TwoFactorANOVA();
			  twoFactorANOVA.setNumberOfTopReporters(4);
			  TwoFactorANOVAAnnotation twoFactorANOVAAnno[] = new TwoFactorANOVAAnnotation[6];
			  for (int i = 0; i < twoFactorANOVAAnno.length; i++) {
				  twoFactorANOVAAnno[i] = new TwoFactorANOVAAnnotation();
				  if (i < 3) twoFactorANOVAAnno[i].setFactorOneLevel(new FactorValue(null, null, "High"));
	//			  else if (i < 4) twoFactorANOVAAnno[i].setFactorOneLevel("Medium");
				  else twoFactorANOVAAnno[i].setFactorOneLevel(new FactorValue(null, null, "Low"));
				  if (i % 2 == 0) twoFactorANOVAAnno[i].setFactorTwoLevel(new FactorValue(null, null, "First"));
				  else twoFactorANOVAAnno[i].setFactorTwoLevel(new FactorValue(null, null, "Second"));
//				  twoFactorANOVAAnno[i].setFactorTwoLevel(pair[i % 3]);
				  twoFactorANOVAAnno[i].setSampleIdentifier("CMHI." + (i+1));
			  }
			  twoFactorANOVA.setTwoFactorANOVAAnnotation(twoFactorANOVAAnno);
			  
			  TopTableCollection twoFactorANOVARetTopTableColl = client.fit(expressionData, twoFactorANOVA);
			  client.displayTopTableCollection(twoFactorANOVARetTopTableColl);
			  
			  
			  // TwoChannel tests
			  File channelOneFile = new File("/home/mtra2/TestData/caLinearModelTestFile_channelOne_mini.txt");
			  File channelTwoFile = new File("/home/mtra2/TestData/caLinearModelTestFile_channelTwo_mini.txt");
			  SingleChannelExpressionDataCollection expressionDataOne = client.readTxt(channelOneFile);
			  SingleChannelExpressionDataCollection expressionDataTwo = client.readTxt(channelTwoFile);
			  TwoChannelExpressionDataCollection twoChannelExpressionDataCollection = new TwoChannelExpressionDataCollection(
						  expressionDataOne.getExpressionDataCollection(),
						  expressionDataTwo.getExpressionDataCollection());
			  twoChannelExpressionDataCollection.setReporterNames(expressionDataOne.getReporterNames());
			  
			  String[] reporterNames = twoChannelExpressionDataCollection.getReporterNames();
			  for(String reporter : reporterNames) {
				  System.out.println("Reporter Name: " + reporter);
			  }
			  
			  DyeSwapTTest dstt = new DyeSwapTTest();
			  dstt.setNumberOfTopReporters(4);
			  dstt.setReferenceLevel(new FactorValue(null, null, "High"));
			  	  			 
			  String[] channels = new String[] {"Cy3", "Cy5" };
			  int nSamples = 8;
			  DyeSwapTTestAnnotation dsttAnno[] = new DyeSwapTTestAnnotation[nSamples * channels.length];

			  for (int channel = 0; channel < channels.length; channel++) {
				  for (int i = 0; i < nSamples; i++) {
					  int sample = channel * nSamples + i;
					  dsttAnno[sample] = new DyeSwapTTestAnnotation();

					  if (channel == 0) {
						  if (i < 2) dsttAnno[sample].setFactorLevel(new FactorValue(null, null, "High"));
						  else if (i >= 4 & i < 6) dsttAnno[sample].setFactorLevel(new FactorValue(null, null, "Low"));
						  else dsttAnno[sample].setFactorLevel(new FactorValue(null, null, "Low"));
					  } else {
						  if (i >=2 & i < 4) dsttAnno[sample].setFactorLevel(new FactorValue(null, null, "High"));
						  else if (i >= 6) dsttAnno[sample].setFactorLevel(new FactorValue(null, null, "Low"));
						  else dsttAnno[sample].setFactorLevel(new FactorValue(null, null, "Low"));
					  }

					  dsttAnno[sample].setChannelIdentifier(channels[channel]);
					  dsttAnno[sample].setSampleIdentifier("CMHI." + (i+1));
				  }
			  }
			  dstt.setDyeSwapTTestAnnotation(dsttAnno);
			  
			  TopTableCollection twoFactorANOVATopTableColl = client.twoChannelFit(twoChannelExpressionDataCollection, dstt);
			  client.displayTopTableCollection(twoFactorANOVATopTableColl);
			  
			  
			  CommonReferenceANOVA comRefANOVATest = new CommonReferenceANOVA();
			  comRefANOVATest.setNumberOfTopReporters(4);
			  comRefANOVATest.setReferenceLevel(new FactorValue(null, null, "Low"));
			  
			  CommonReferenceANOVAAnnotation[] comRefANOVAAnno = new CommonReferenceANOVAAnnotation[nSamples * channels.length];
			  for (int channel = 0; channel < channels.length; channel++) {
				  for (int i = 0; i < nSamples; i++) {
					  int sample = channel * nSamples + i;
					  comRefANOVAAnno[sample] = new CommonReferenceANOVAAnnotation();

					  if (channel == 0) {
						  if (i < 2) comRefANOVAAnno[sample].setFactorLevel(new FactorValue(null, null, "High"));
						  else if (i >= 2 & i < 4) comRefANOVAAnno[sample].setFactorLevel(new FactorValue(null, null, "Medium"));
						  else comRefANOVAAnno[sample].setFactorLevel(new FactorValue(null, null, "Low"));
					  } else {
						  if (i < 4) comRefANOVAAnno[sample].setFactorLevel(new FactorValue(null, null, "Low"));
						  else if (i >= 4 & i < 6) comRefANOVAAnno[sample].setFactorLevel(new FactorValue(null, null, "High"));
						  else comRefANOVAAnno[sample].setFactorLevel(new FactorValue(null, null, "High"));
					  }

					  comRefANOVAAnno[sample].setChannelIdentifier(channels[channel]);
					  comRefANOVAAnno[sample].setSampleIdentifier("CMHI." + (i+1));
				  }
			  }
			  comRefANOVATest.setCommonReferenceANOVAAnnotation(comRefANOVAAnno);
			  
			  twoFactorANOVATopTableColl = client.twoChannelFit(twoChannelExpressionDataCollection, comRefANOVATest);
			  client.displayTopTableCollection(twoFactorANOVATopTableColl);
*/
			  String filePath = "/home/mtra2/temp/caLinearModel/test/src/org/bioconductor/rserviceJms/worker/Data/OneChannelTest.oneChannelExpressionData.rda_java.Data";
			  org.bioconductor.cagrid.data.SingleChannelExpressionDataCollection singleChanExpDataColl = CaLinearModelHelper.deserializeToSingleChannelExpDataCollection(filePath);
			  
			  System.out.println("Done with deserializing OneChannelExpressionData");
			  
			  filePath = "/home/mtra2/temp/caLinearModel/test/src/org/bioconductor/rserviceJms/worker/Data/OneChannelTest.sampleAnnotationCollection.rda_java.Data";
			  org.bioconductor.cagrid.calinearmodel.TTest tTest = CaLinearModelHelper.deserializeToTTest(filePath);
			  tTest.setNumberOfTopReporters(10);
			  
			  System.out.println("Done with deserializing SampleAnnotationCollection:");
			  
			  TopTableCollection ttColl = client.fit(singleChanExpDataColl, tTest);
			  client.displayTopTableCollection(ttColl);
			  										  
			} else {
				usage();
				System.exit(1);
			}
		} else {
			usage();
			System.exit(1);
		}
		} catch (Exception e) {
			e.printStackTrace();
			System.exit(1);
		}
	}
	
	private void displayTopTableCollection(TopTableCollection ttColl) 
	{
		if(ttColl != null) {
			  System.out.println(" Model Spec: " + ttColl.getModelSpecification() + " Constrast Spec: " + ttColl.getTopTable(0).getContrastSpecification());
			  System.out.println("Num of TopTable: " + ttColl.getTopTable().length);
			  TopTable topTable = ttColl.getTopTable()[0];
			  TopTableEntry[] ttEntries = topTable.getTopTableEntry();
			  for(TopTableEntry ttEntry : ttEntries ) {
				  System.out.println("*****************");
				  System.out.println("Adjust value: " + ttEntry.getAdjustedPValue());
				  System.out.println("Fold Change: " + ttEntry.getLogFoldChange());
				  System.out.println("Odd Score: " + ttEntry.getLogOddsScore());
				  System.out.println("P value: " + ttEntry.getPValue());
				  System.out.println("reporter name: " + ttEntry.getReporterName());
				  System.out.println("T Coef: " + ttEntry.getTCoefficient());
			  }
		  }
	}

  
  private org.bioconductor.cagrid.data.SingleChannelExpressionDataCollection readTxt(File p_file) throws java.io.FileNotFoundException, Exception{

      System.out.println("File is: " + p_file);
      FileInputStream fis = new FileInputStream(p_file);
      return this.readStream(fis);
  }

     public org.bioconductor.cagrid.data.SingleChannelExpressionDataCollection readStream(InputStream fis)throws IOException {

      String line = "";
      System.out.println("invokeService called");

        ArrayList<String> probeID = new ArrayList();

      ArrayList[] ratioLists = null;
      String[] ratioListNames = null;
      try {
           //File p_file = null;
           //p_file = new File("/home/ryan/Desktop/2008.09.15.caDNAcopyClientDev/coriell.txt");

          InputStreamReader fr = new InputStreamReader(fis);
          BufferedReader br = new BufferedReader(fr);
          String header = "";
          header = br.readLine();
          String[] headerCount = header.split("\\t");
              System.out.println("Number of columns is: " + headerCount.length);

              int numSamples = headerCount.length - 1;
              System.out.println("Number of samples: " + numSamples);
              ratioLists = new ArrayList[numSamples];
              for (int i = 0; i < numSamples; i++){
                  ratioLists[i] = new ArrayList();
              }

              //get sample IDs from header
              ratioListNames = new String[numSamples];
              for (int i=0; i < numSamples; i++){
                  ratioListNames[i] = headerCount[i+1];
                  System.out.println("Sample names: " + ratioListNames[i]);
              }

              while((line = br.readLine()) != null) {

                  String[] element = line.split("\\t");
                    String pid = element[0];
                    probeID.add(pid);
                           for(int i=0; i < numSamples; i++){
                      double ratio;
                      try {
//                               ratio = Double.parseDouble (element[i+3]);
                            ratio = Double.parseDouble (element[i+1]);
//                            System.out.println("This is ratio: " + ratio);
                      } catch (NumberFormatException n) {
                          ratio = Double.NaN;
                      }
                      ratioLists[i].add(ratio);
                      //System.out.println("Ratio: " + ratio);
                  }
              }
      }
      catch(FileNotFoundException fN) {
       fN.printStackTrace();
      }

          ExpressionData[] eds = new ExpressionData[ratioListNames.length];
          DoubleColumn[] doubleColumns = new DoubleColumn[ratioListNames.length];
          System.out.println("This is the length of doubleColumns: " + doubleColumns.length);
          for(int i=0; i < ratioListNames.length; i++) {
              ArrayList<Double[]> data = ratioLists[i];
              Double[] dataAsDouble =  data.toArray(new Double[0]);
              double[] dataAsd = new double[dataAsDouble.length];
              for (int j=0; j < dataAsDouble.length;j++){
                  dataAsd[j] = dataAsDouble[j];
              }

          doubleColumns[i] = new DoubleColumn(dataAsd);
          eds[i] = new ExpressionData(doubleColumns[i],ratioListNames[i]);

      }

        String[] probeArray = probeID.toArray(new String[0]);
        String[] probe = new String[probeArray.length];
        for (int i=0; i < probeArray.length;i++){
              probe[i] = probeArray[i];
          }

          System.out.println("Done creating SingleChannelExpressionDataCollection");

        SingleChannelExpressionDataCollection scdc = new org.bioconductor.cagrid.data.SingleChannelExpressionDataCollection(eds);
        scdc.setReporterNames(probe);

            return scdc;

}

  public org.oasis.wsrf.properties.GetMultipleResourcePropertiesResponse getMultipleResourceProperties(org.oasis.wsrf.properties.GetMultipleResourceProperties_Element params) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"getMultipleResourceProperties");
    return portType.getMultipleResourceProperties(params);
    }
  }

  public org.oasis.wsrf.properties.GetResourcePropertyResponse getResourceProperty(javax.xml.namespace.QName params) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"getResourceProperty");
    return portType.getResourceProperty(params);
    }
  }

  public org.oasis.wsrf.properties.QueryResourcePropertiesResponse queryResourceProperties(org.oasis.wsrf.properties.QueryResourceProperties_Element params) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"queryResourceProperties");
    return portType.queryResourceProperties(params);
    }
  }

  public org.bioconductor.cagrid.data.TopTableCollection fit(org.bioconductor.cagrid.data.SingleChannelExpressionDataCollection singleChannelExpressionDataCollection,org.bioconductor.cagrid.calinearmodel.OneChannelModel oneChannelModel) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"fit");
    org.bioconductor.packages.caLinearModel.stubs.FitRequest params = new org.bioconductor.packages.caLinearModel.stubs.FitRequest();
    org.bioconductor.packages.caLinearModel.stubs.FitRequestSingleChannelExpressionDataCollection singleChannelExpressionDataCollectionContainer = new org.bioconductor.packages.caLinearModel.stubs.FitRequestSingleChannelExpressionDataCollection();
    singleChannelExpressionDataCollectionContainer.setSingleChannelExpressionDataCollection(singleChannelExpressionDataCollection);
    params.setSingleChannelExpressionDataCollection(singleChannelExpressionDataCollectionContainer);
    org.bioconductor.packages.caLinearModel.stubs.FitRequestOneChannelModel oneChannelModelContainer = new org.bioconductor.packages.caLinearModel.stubs.FitRequestOneChannelModel();
    oneChannelModelContainer.setOneChannelModel(oneChannelModel);
    params.setOneChannelModel(oneChannelModelContainer);
    org.bioconductor.packages.caLinearModel.stubs.FitResponse boxedResult = portType.fit(params);
    return boxedResult.getTopTableCollection();
    }
  }

  public org.bioconductor.cagrid.data.TopTableCollection twoChannelFit(org.bioconductor.cagrid.data.TwoChannelExpressionDataCollection twoChannelExpressionDataCollection,org.bioconductor.cagrid.calinearmodel.TwoChannelModel twoChannelModel) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"twoChannelFit");
    org.bioconductor.packages.caLinearModel.stubs.TwoChannelFitRequest params = new org.bioconductor.packages.caLinearModel.stubs.TwoChannelFitRequest();
    org.bioconductor.packages.caLinearModel.stubs.TwoChannelFitRequestTwoChannelExpressionDataCollection twoChannelExpressionDataCollectionContainer = new org.bioconductor.packages.caLinearModel.stubs.TwoChannelFitRequestTwoChannelExpressionDataCollection();
    twoChannelExpressionDataCollectionContainer.setTwoChannelExpressionDataCollection(twoChannelExpressionDataCollection);
    params.setTwoChannelExpressionDataCollection(twoChannelExpressionDataCollectionContainer);
    org.bioconductor.packages.caLinearModel.stubs.TwoChannelFitRequestTwoChannelModel twoChannelModelContainer = new org.bioconductor.packages.caLinearModel.stubs.TwoChannelFitRequestTwoChannelModel();
    twoChannelModelContainer.setTwoChannelModel(twoChannelModel);
    params.setTwoChannelModel(twoChannelModelContainer);
    org.bioconductor.packages.caLinearModel.stubs.TwoChannelFitResponse boxedResult = portType.twoChannelFit(params);
    return boxedResult.getTopTableCollection();
    }
  }

}
