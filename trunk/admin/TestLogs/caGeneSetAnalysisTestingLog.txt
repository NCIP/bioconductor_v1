caGeneSetAnalysis Testing Log

Below is a summary of what I've done to test the caGeneSetAnalysis service.  Each test is in the format of:

<Test Title>
Test: <Test Description>
Result: <Test Result>
<STATUS: PASS\FAIL>



For testing in R, session info:

> sessionInfo()
R version 2.10.0 Under development (unstable) (2009-08-10 r49131) 
x86_64-unknown-linux-gnu 

locale:
 [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C              
 [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8    
 [5] LC_MONETARY=C              LC_MESSAGES=en_US.UTF-8   
 [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                 
 [9] LC_ADDRESS=C               LC_TELEPHONE=C            
[11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C       

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base     

other attached packages:
 [1] GO.db_2.3.0         hgu95av2.db_2.3.4   org.Hs.eg.db_2.3.4 
 [4] RSQLite_0.7-1       DBI_0.2-4           GSEABase_1.7.1     
 [7] graph_1.23.4        annotate_1.23.1     AnnotationDbi_1.7.8
[10] Biobase_2.5.5      

loaded via a namespace (and not attached):
[1] tools_2.10.0 XML_2.6-0    xtable_1.5-5





#################################################
# Test Date(s): 9/10 - 9/11/2009
# Version: caGeneSetAnalysis_0.1.3
# 
# tools
# stats
# graphics
# grDevices
# utils
# datasets
# methods
# base
# GO.db_2.3.0
# hgu95av2.db_2.3.4
# org.Hs.eg.db_2.3.4
# caMachineLearning_0.1.0
# caLinearModel_0.0.18
# caGeneSetAnalysis_0.1.3
# GOstats_2.11.1
# RSQLite_0.7-2
# DBI_0.2-4
# graph_1.23.3
# Category_2.11.1
# AnnotationDbi_1.7.11
# caGeneFilter_0.1.16
# caArrayQualityMetrics_0.1.1
# affyPLM_1.21.0
# preprocessCore_1.7.5
# gcrma_2.17.2
# affy_1.23.5
# latticeExtra_0.6-1
# RColorBrewer_1.0-2
# lattice_0.17-25
# Biobase_2.5.5
# RWebServices_1.9.3
# TypeInfo_1.11.0
# SJava_0.70.19
#
#################################################


Continuous GeneSetAnalysis
Test: Continuous GeneSetAnalysis GO:BP, min 3, hgu95av2
	Parameter(s):
		set category: GO
			ontology: BP
		minimum number of genes: 3	
		annotation: hgu95av2
	Input File(s): probesForTesting_v1.1.txt
Result: Results between webservice and using in an interactive R session are identical.  Gene set reporter names are members of GO:BP.
	caGeneSetAnalysis Client Results File: continuous_GOanno_hgu95av2_minGene_3_BP.txt
	R Result:
	> lst
	$`GO:0007610`
	[1] "33445_at" "33446_at" "36364_at"

	$`GO:0008152`
	[1] "36512_at" "38187_at" "38912_at"

	$`GO:0009450`
	[1] "33445_at" "33446_at" "36364_at"

	$`GO:0042135`
	[1] "33445_at" "33446_at" "36364_at"

	$`GO:0048148`
	[1] "33445_at" "33446_at" "36364_at"

	> pValue
	GO:0007610 GO:0008152 GO:0009450 GO:0042135 GO:0048148 
	0.1241065  0.1241065  0.1241065  0.1241065  0.1241065 
	
		R code:
		library(GSEABase)	
		#test parameters
		annotation<-"hgu95av2"
		ontology<-"BP"
		minimumGenesPerGeneSet<-3
		d<-read.delim("probesForTesting_v1.1.txt", skip=1)
		reporterName<-as.character(d$Reporter.Name)
		tCoefficient<-d$t
		#
		# Check for and load the specified annotation package if necessary.
		#
		.requireAnnotation <- function(annotation) {
		if (require(annotate::annPkgName(annotation), character.only=TRUE) != TRUE) {
			tryCatch({
			source('http://bioconductor.org/biocLite.R')
			biocLite(annotate::annPkgName(annotation))
			if (require(annotate::annPkgName(annotation), character.only=TRUE) != TRUE)
			stop("unknown annotation:", annotation)
			}, error=function(err) {
			stop("could not access annotation:", annotation,
				"\n  reason:", conditionMessage(err))
			})
		}	
		}
			.requireAnnotation(annotation)

		map <- getAnnMap(map="GO", chip=annotation, load=TRUE)
		tbl <- toTable( map[reporterName] )
		lst <- with(tbl[tbl[["Ontology"]] == ontology,],
				split(probe_id, go_id))
			lst <- lst[ sapply(lst, is.character) ]      # filter out NAs
			lst <- lapply(lst, unique)  # remove duplicate probe ids
			lst <- lst[ sapply(lst, length) >= minimumGenesPerGeneSet ]
			gsc <- GeneSetCollection(mapply(function(geneId, id) {
				GeneSet(geneId, geneIdType=AnnotationIdentifier(annotation),
					collectionType=GOCollection(id, ontology=ontology),
					setName=id)
			}, lst, names(lst)))
		lst
		length(gsc)
		# Build the incidence matrix.  Select only those tCoefficients for
		# genes that remain as column names of the incidence matrix.
		Am <- incidence(gsc)
		tCoefficient <- tCoefficient[ match( reporterName, colnames(Am), nomatch=0 ) ]
		# Execute the test.  For a GeneSet of size n, sum(tstat)/sqrt(n)
		# is approximately normally distributed with mean 0 and variance 1.
		tA    <- as.vector(Am %*% tCoefficient)
		tAadj <- tA/sqrt(rowSums(Am))
		names(tA) <- names(tAadj) <- rownames(Am)
		pValue <- pnorm( abs(tAadj), lower.tail=FALSE )
		geneSetMembers        <- lapply(gsc, geneIds)
		names(geneSetMembers) <- names(gsc)
		#check results
		lst
		pValue

STATUS: PASS		


Continuous GeneSetAnalysis
Test: Continuous GeneSetAnalysis GO:CC, min 3, hgu95av2
	Parameter(s):
		set category: GO
			ontology: CC
		minimum number of genes: 3	
		annotation: hgu95av2
	Input File(s): probesForTesting_v1.1.txt
Result: Results between webservice and using in an interactive R session are identical.  Gene set reporter names are members of GO:CC.
	caGeneSetAnalysis Client Results File: continuous_GOanno_hgu95av2_minGene_3_CC.txt
	R Result:
	> lst
	$`GO:0005737`
	[1] "36185_at" "36512_at" "38187_at" "38434_at" "38912_at" "40019_at"

	$`GO:0005739`
	[1] "33445_at" "33446_at" "36364_at" "39793_at"

	$`GO:0005759`
	[1] "33445_at" "33446_at" "36364_at"

	$`GO:0005886`
	[1] "160035_at" "31442_at"  "36788_at"  "38434_at"  "40019_at" 

	$`GO:0005887`
	[1] "1051_g_at" "31442_at"  "31889_at"  "31998_at"  "36788_at"  "39793_at" 
	[7] "40019_at" 

	$`GO:0016020`
	[1] "1051_g_at"  "31889_at"   "31998_at"   "32468_f_at" "32469_at"  
	[6] "32490_at"   "36512_at"  

	$`GO:0016021`
	[1] "160035_at"  "32468_f_at" "32469_at"   "32490_at"   "36512_at"  

	$`GO:0031225`
	[1] "160035_at" "31442_at"  "36788_at" 

	$`GO:0032144`
	[1] "33445_at" "33446_at" "36364_at"

	> pValue
	GO:0005737 GO:0005739 GO:0005759 GO:0005886 GO:0005887 GO:0016020 GO:0016021 
	0.11033568 0.06680720 0.12410654 0.32736042 0.02939086 0.06528501 0.32736042 
	GO:0031225 GO:0032144 
	0.50000000 0.12410654 
	
		R code: identical to that used for 'Continuous GeneSetAnalysis GO:BP, min 3, hgu95av2,' with the exception of:
		ontology<-"CC"

STATUS: PASS		


Continuous GeneSetAnalysis
Test: Continuous GeneSetAnalysis GO:MF, min 3, hgu95av2
	Parameter(s): 
		set category: GO
			ontology: MF
		minimum number of genes: 3	
		annotation: hgu95av2
	Input File(s): probesForTesting_v1.1.txt
Result: Results between webservice and using in an interactive R session are identical.  Gene set reporter names are members of GO:MF.
	caGeneSetAnalysis Client Results File: continuous_GOanno_hgu95av2_minGene_3_MF.txt
	R Result:
	> lst
	$`GO:0003867`
	[1] "33445_at" "33446_at" "36364_at"

	$`GO:0005509`
	[1] "35693_at" "39300_at" "41602_at"

	$`GO:0005515`
	 [1] "33385_g_at" "33445_at"   "33446_at"   "33825_at"   "35097_at"  
	 [6] "35193_at"   "35693_at"   "36364_at"   "41257_at"   "41380_at"  
	[11] "41602_at"  

	$`GO:0016740`
	[1] "33445_at" "33446_at" "36364_at" "38187_at" "38912_at"

	$`GO:0030170`
	[1] "33445_at" "33446_at" "36364_at"

	$`GO:0032145`
	[1] "33445_at" "33446_at" "36364_at"

	$`GO:0042803`
	[1] "33445_at" "33446_at" "36364_at"

	$`GO:0047298`
	[1] "33445_at" "33446_at" "36364_at"

	> pValue
	GO:0003867 GO:0005509 GO:0005515 GO:0016740 GO:0030170 GO:0032145 GO:0042803 
	0.28185143 0.12410654 0.06583401 0.08985625 0.28185143 0.28185143 0.28185143 
	GO:0047298 
	0.28185143 

	
		R code: identical to that used for 'Continuous GeneSetAnalysis GO:BP, min 3, hgu95av2,' with the exception of:
		ontology<-"MF"

STATUS: PASS


Continuous GeneSetAnalysis
Test: Continuous GeneSetAnalysis KEGG, min 3, hgu95av2
	Parameter(s): 
		set category: KEGG
		minimum number of genes: 3	
		annotation: hgu95av2
	Input File(s): probesForTesting_v1.1.txt
Result: Results between webservice and using in an interactive R session are identical.  Gene set reporter names are members of KEGG.
	caGeneSetAnalysis Client Results File: continuous_KEGGanno_hgu95av2_minGene_3.txt
	R Result:
	> lst
	$`00251`
	[1] "33445_at" "33446_at" "36364_at"

	$`00252`
	[1] "33445_at" "33446_at" "36185_at" "36364_at"

	$`00280`
	[1] "33445_at" "33446_at" "36364_at"

	$`00410`
	[1] "33445_at" "33446_at" "36364_at"

	$`00640`
	[1] "33445_at" "33446_at" "36364_at"

	$`00650`
	[1] "33445_at" "33446_at" "36364_at"

	> pValue
	    00251     00252     00280     00410     00640     00650 
	0.1241065 0.1586553 0.1241065 0.1241065 0.1241065 0.1241065 
	
		R code:
		library(GSEABase)	
		#test parameters
		annotation<-"hgu95av2"
		minimumGenesPerGeneSet<-3
		d<-read.delim("probesForTesting_v1.1.txt", skip=1)
		reporterName<-as.character(d$Reporter.Name)
		tCoefficient<-d$t
		#
		# Check for and load the specified annotation package if necessary.
		#
		.requireAnnotation <- function(annotation) {
		if (require(annotate::annPkgName(annotation), character.only=TRUE) != TRUE) {
			tryCatch({
			source('http://bioconductor.org/biocLite.R')
			biocLite(annotate::annPkgName(annotation))
			if (require(annotate::annPkgName(annotation), character.only=TRUE) != TRUE)
			stop("unknown annotation:", annotation)
			}, error=function(err) {
			stop("could not access annotation:", annotation,
				"\n  reason:", conditionMessage(err))
			})
		}
		}
			.requireAnnotation(annotation)

		# Map reporterNames to KEGG sets via annotation.
		map <- getAnnMap(map="PATH", chip=annotation, load=TRUE)

		lst <- reverseSplit(as.list( map[reporterName] ))
		lst <- lst[ sapply(lst, is.character) ] # filter out NAs
		lst <- lapply(lst, unique)      # remove duplicate probe ids
		lst <- lst[ sapply( lst, length ) >= minimumGenesPerGeneSet ]
		gsc <- GeneSetCollection(mapply(function(geneId, id) {
			    GeneSet(geneId, geneIdType=AnnotationIdentifier(annotation),
				collectionType=KEGGCollection(id),
				setName=id)
		       }, lst, names(lst)))

		# Filter out GeneSets with fewer than minimumGenesPerGeneSet genes.
		if (length(gsc) == 0) 
		    stop("No GeneSets were found with greater than 'minimumGenesPerGeneSet' genes.")

		# Build the incidence matrix.  Select only those tCoefficients for
		# genes that remain as column names of the incidence matrix.
		Am <- incidence(gsc)
		tCoefficient <- tCoefficient[ match( reporterName, colnames(Am), nomatch=0 ) ]

		# Execute the test.  For a GeneSet of size n, sum(tstat)/sqrt(n)
		# is approximately normally distributed with mean 0 and variance 1.
		tA    <- as.vector(Am %*% tCoefficient)
		tAadj <- tA/sqrt(rowSums(Am))
		names(tA) <- names(tAadj) <- rownames(Am)
		pValue <- pnorm( abs(tAadj), lower.tail=FALSE )	
		geneSetMembers        <- lapply(gsc, geneIds)
		names(geneSetMembers) <- names(gsc)
		#check results
		lst
		pValue

STATUS: PASS		


Continuous GeneSetAnalysis
Test: Continuous GeneSetAnalysis PFAM, min 3, hgu95av2
	Parameter(s): 
		set category: PFAM
		minimum number of genes: 3	
		annotation: hgu95av2
	Input File(s): probesForTesting_v1.1.txt
Result: Results between webservice and using in an interactive R session are identical.  Gene set reporter names are members of PFAM.
	caGeneSetAnalysis Client Results File: continuous_PFAManno_hgu95av2_minGene_3.txt
	R Result:
	> lst
	$PF00036
	[1] "35693_at" "39300_at" "41602_at"
	
	$PF00202
	[1] "33445_at" "33446_at" "36364_at"

	$PF07686
	[1] "160035_at"  "31442_at"   "32468_f_at" "32469_at"   "32490_at"  

	> pValue
	PF00036    PF00202    PF07686 
	0.28185143 0.12410654 0.08985625 
		
		R code:
		library(GSEABase)	
		#test parameters
		annotation<-"hgu95av2"
		minimumGenesPerGeneSet<-3
		d<-read.delim("probesForTesting_v1.1.txt", skip=1)
		reporterName<-as.character(d$Reporter.Name)
		tCoefficient<-d$t
		#
		# Check for and load the specified annotation package if necessary.
		#
		.requireAnnotation <- function(annotation) {
		if (require(annotate::annPkgName(annotation), character.only=TRUE) != TRUE) {
			tryCatch({
			source('http://bioconductor.org/biocLite.R')
			biocLite(annotate::annPkgName(annotation))
			if (require(annotate::annPkgName(annotation), character.only=TRUE) != TRUE)
			stop("unknown annotation:", annotation)
			}, error=function(err) {
			stop("could not access annotation:", annotation,
				"\n  reason:", conditionMessage(err))
			})
		}
		}
			.requireAnnotation(annotation)
			
		# Map reporterNames to PFAM sets via annotation.
		map <- getAnnMap(map="PFAM", annotation)[reporterName]

		lst <- reverseSplit(eapply(map, as.vector))
		lst <- lst[ sapply(lst, is.character) ]      # filter out NAs
		lst <- lapply(lst, unique)      # remove duplicate probe ids
		lst <- lst[ sapply( lst, length ) >= minimumGenesPerGeneSet ]
		gsc <- GeneSetCollection(mapply(function(geneId, id) {
			    GeneSet(geneId, geneIdType=AnnotationIdentifier(annotation),
				collectionType=PfamCollection(id),
				setName=id)
		       }, lst, names(lst)))

		if (length(gsc) == 0)
		    stop("No GeneSets were found with greater than 'minimumGenesPerGeneSet' genes.")

		# Build the incidence matrix.  Select only those tCoefficients for
		# genes that remain as column names of the incidence matrix.
		Am <- incidence(gsc)
		tCoefficient <- tCoefficient[ match( reporterName, colnames(Am), nomatch=0 ) ]
		
		# Execute the test.  For a GeneSet of size n, sum(tstat)/sqrt(n)
		# is approximately normally distributed with mean 0 and variance 1.
		tA    <- as.vector(Am %*% tCoefficient)
		tAadj <- tA/sqrt(rowSums(Am))
		names(tA) <- names(tAadj) <- rownames(Am)
		pValue <- pnorm( abs(tAadj), lower.tail=FALSE )
		geneSetMembers        <- lapply(gsc, geneIds)
		names(geneSetMembers) <- names(gsc)
		#check results
		lst
		pValue

STATUS: PASS		


Continuous GeneSetAnalysis
Test: Continuous GeneSetAnalysis PFAM, min 5, hgu95av2
	Parameter(s): 
		set category: PFAM
		minimum number of genes: 5	
		annotation: hgu95av2
	Input File(s): probesForTesting_v1.1.txt
Result: Results between webservice and using in an interactive R session are identical.  Gene set reporter names are members of PFAM.
	caGeneSetAnalysis Client Results File: continuous_PFAManno_hgu95av2_minGene_5.txt
	R Result:
	> lst
	$PF07686
	[1] "160035_at"  "31442_at"   "32468_f_at" "32469_at"   "32490_at"  

	> pValue
	   PF07686 
	0.08985625 

		R code: identical to that used for 'Continuous GeneSetAnalysis PFAM, min 3, hgu95av2,' with the exception of:
		minimumGenesPerGeneSet<-3

STATUS: PASS		


Continuous GeneSetAnalysis
Test: Continuous GeneSetAnalysis PFAM, min 10, hgu95av2
	Parameter(s): 
		set category: PFAM
		minimum number of genes: 10	
		annotation: hgu95av2
	Input File(s): probesForTesting_v1.1.txt
Result: Results between webservice and using in an interactive R session are identical:  "No GeneSets were found with greater than 'minimumGenesPerGeneSet' genes."
		caGeneSetAnalysis Client Results File: not generated
	R Result: "No GeneSets were found with greater than 'minimumGenesPerGeneSet' genes."

		R code: identical to that used for 'Continuous GeneSetAnalysis PFAM, min 3, hgu95av2,' with the exception of:
		minimumGenesPerGeneSet<-10

STATUS: PASS		









#Discrete GeneSet Analysis tests are on hold until reporter names are returned by the webservice.





